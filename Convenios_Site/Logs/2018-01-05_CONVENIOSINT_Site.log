2018-01-05 08:00:44,536 [ID (null)] [8] ERROR MasterPage - 7503-Error en sesión.No se puede obtener credenciales
Anses.Director.Session.DirSessionExepcion: 7503-Error en sesión.No se puede obtener credenciales
   en Anses.Director.Session.Credencial.ObtenerCredencial()
   en MasterPage.Page_Init(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\MasterPage\MasterPage.master.cs:línea 144
2018-01-05 08:00:45,405 [ID (null)] [8] ERROR DirectorManager - En consultarDirector 7503-Error en sesión.No se puede obtener credenciales
2018-01-05 08:00:45,438 [ID (null)] [8] ERROR Paginas_Main - Error al cargar la pagina Main.aspx error: Subproceso anulado.
2018-01-05 08:23:09,060 [ID (null)] [10] ERROR global_asax - ID Error       : 891990774
Mensaje Error : El archivo '/Convenios_Site/Paginas/ConIndicadoresXSector.aspx' no existe.
Stack     :    en System.Web.UI.Util.CheckVirtualFileExists(VirtualPath virtualPath)
   en System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate)
   en System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate)
   en System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean throwIfNotFound)
   en System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(VirtualPath virtualPath, Type requiredBaseType, HttpContext context, Boolean allowCrossApp)
   en System.Web.UI.PageHandlerFactory.GetHandlerHelper(HttpContext context, String requestType, VirtualPath virtualPath, String physicalPath)
   en System.Web.UI.PageHandlerFactory.GetHandler(HttpContext context, String requestType, String virtualPath, String path)
   en System.Web.HttpApplication.MaterializeHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   en System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)

2018-01-05 08:59:34,027 [ID (null)] [43] ERROR MasterPage - 7503-Error en sesión.No se puede obtener credenciales
Anses.Director.Session.DirSessionExepcion: 7503-Error en sesión.No se puede obtener credenciales
   en Anses.Director.Session.Credencial.ObtenerCredencial()
   en MasterPage.Page_Init(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\MasterPage\MasterPage.master.cs:línea 144
2018-01-05 08:59:34,169 [ID (null)] [43] ERROR DirectorManager - En consultarDirector 7503-Error en sesión.No se puede obtener credenciales
2018-01-05 09:05:14,500 [ID (null)] [54] ERROR global_asax - ID Error       : -317329698
Mensaje Error : System.Collections.Generic.List`1[ActoresWS.SolicitudProvisoria] TraeSolicitudesProvisorias(System.String, System.String, System.Nullable`1[System.Int16], System.Nullable`1[System.Int16], Boolean, System.String ByRef) - Error:System.Configuration->Se ha producido un error al cargar el archivo de configuración: Controlador no válido.
 (C:\Windows\Microsoft.NET\Framework\v4.0.30319\Config\machine.config)
Stack     :    en InvocaWsDao.TraeSolicitudesProvisorias(String anio, String mes, Nullable`1 codPais, Nullable`1 codPrestacion, Boolean soloProvisorias, String& mensaje) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 1874
   en Paginas_ConsultaTProvisorios.btnConsultar_Click(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\Paginas\ConsultaTProvisorios.aspx.cs:línea 305
   en System.Web.UI.WebControls.Button.OnClick(EventArgs e)
   en System.Web.UI.WebControls.Button.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.WebControls.Button.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(IPostBackEventHandler sourceControl, String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(NameValueCollection postData)
   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)

2018-01-05 09:41:41,454 [ID (null)] [7] ERROR MasterPage - 7503-Error en sesión.No se puede obtener credenciales
Anses.Director.Session.DirSessionExepcion: 7503-Error en sesión.No se puede obtener credenciales
   en Anses.Director.Session.Credencial.ObtenerCredencial()
   en MasterPage.Page_Init(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\MasterPage\MasterPage.master.cs:línea 144
2018-01-05 09:41:41,548 [ID (null)] [7] ERROR DirectorManager - En consultarDirector 7503-Error en sesión.No se puede obtener credenciales
2018-01-05 10:15:41,960 [ID (null)] [37] ERROR global_asax - ID Error       : 470299538
Mensaje Error : System.Collections.Generic.List`1[ActoresWS.LsBeneficiario] TraerBeneficiarios(ActoresWS.TipoConsultaBeneficioario, System.String, System.String, System.String ByRef) - Error:Anses.Director.Session.lib->7503-Error en sesión.No se puede obtener credenciales
Stack     :    en InvocaWsDao.TraerBeneficiarios(TipoConsultaBeneficioario iTipoConsulta, String parametro, String codDoc, String& mensaje) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 1685
   en Paginas_Main.btnBuscar_Click(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\Paginas\Main.aspx.cs:línea 193
   en System.Web.UI.WebControls.Button.OnClick(EventArgs e)
   en System.Web.UI.WebControls.Button.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.WebControls.Button.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(IPostBackEventHandler sourceControl, String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(NameValueCollection postData)
   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)

2018-01-05 10:15:58,968 [ID (null)] [30] ERROR global_asax - ID Error       : -2076469638
Mensaje Error : System.Collections.Generic.List`1[ActoresWS.LsBeneficiario] TraerBeneficiarios(ActoresWS.TipoConsultaBeneficioario, System.String, System.String, System.String ByRef) - Error:Anses.Director.Session.lib->7503-Error en sesión.No se puede obtener credenciales
Stack     :    en InvocaWsDao.TraerBeneficiarios(TipoConsultaBeneficioario iTipoConsulta, String parametro, String codDoc, String& mensaje) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 1685
   en Paginas_Main.btnBuscar_Click(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\Paginas\Main.aspx.cs:línea 193
   en System.Web.UI.WebControls.Button.OnClick(EventArgs e)
   en System.Web.UI.WebControls.Button.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.WebControls.Button.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(IPostBackEventHandler sourceControl, String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(NameValueCollection postData)
   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)

2018-01-05 14:27:26,324 [ID (null)] [5] ERROR InvocaWsDao - en VersionSistema se produjo el siguiente error => System.InvalidOperationException: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
   en System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   en System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   en AuxiliaresWS.AuxiliaresWS.VersionSistema() en c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_WebReferences.arugxzqd.2.cs:línea 142
   en InvocaWsDao.VersionSistema() en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 161
2018-01-05 14:27:26,401 [ID (null)] [5] ERROR comun_controles_cabecera - Se generó una excepción : El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
2018-01-05 14:27:35,567 [ID (null)] [10] ERROR InvocaWsDao - en VersionSistema se produjo el siguiente error => System.InvalidOperationException: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
   en System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   en System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   en AuxiliaresWS.AuxiliaresWS.VersionSistema() en c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_WebReferences.arugxzqd.2.cs:línea 142
   en InvocaWsDao.VersionSistema() en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 161
2018-01-05 14:27:35,567 [ID (null)] [10] ERROR comun_controles_cabecera - Se generó una excepción : El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.quprog3m.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
2018-01-05 14:27:49,085 [ID (null)] [7] ERROR InvocaWsDao - en VersionSistema se produjo el siguiente error => System.InvalidOperationException: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
   en System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   en System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   en AuxiliaresWS.AuxiliaresWS.VersionSistema() en c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_WebReferences.arugxzqd.2.cs:línea 142
   en InvocaWsDao.VersionSistema() en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 161
2018-01-05 14:27:49,086 [ID (null)] [7] ERROR comun_controles_cabecera - Se generó una excepción : El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
2018-01-05 14:27:49,709 [ID (null)] [9] ERROR InvocaWsDao - en VersionSistema se produjo el siguiente error => System.InvalidOperationException: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
   en System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   en System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   en AuxiliaresWS.AuxiliaresWS.VersionSistema() en c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_WebReferences.arugxzqd.2.cs:línea 142
   en InvocaWsDao.VersionSistema() en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 161
2018-01-05 14:27:49,709 [ID (null)] [9] ERROR comun_controles_cabecera - Se generó una excepción : El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.mpc3eomw.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
2018-01-05 14:27:53,299 [ID (null)] [7] ERROR global_asax - ID Error       : 612475068
Mensaje Error : Referencia a objeto no establecida como instancia de un objeto.
Stack     :    en Paginas_ConsultaTProvisorios.btnConsultar_Click(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\Paginas\ConsultaTProvisorios.aspx.cs:línea 270
   en System.Web.UI.WebControls.Button.OnClick(EventArgs e)
   en System.Web.UI.WebControls.Button.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.WebControls.Button.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(IPostBackEventHandler sourceControl, String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(NameValueCollection postData)
   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)

2018-01-05 14:27:55,458 [ID (null)] [8] ERROR global_asax - ID Error       : -486905482
Mensaje Error : Referencia a objeto no establecida como instancia de un objeto.
Stack     :    en Paginas_ConsultaTProvisorios.btnConsultar_Click(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\Paginas\ConsultaTProvisorios.aspx.cs:línea 270
   en System.Web.UI.WebControls.Button.OnClick(EventArgs e)
   en System.Web.UI.WebControls.Button.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.WebControls.Button.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(IPostBackEventHandler sourceControl, String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(NameValueCollection postData)
   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)

2018-01-05 14:28:19,096 [ID (null)] [5] ERROR InvocaWsDao - en VersionSistema se produjo el siguiente error => System.InvalidOperationException: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
   en System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   en System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   en AuxiliaresWS.AuxiliaresWS.VersionSistema() en c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_WebReferences.arugxzqd.2.cs:línea 142
   en InvocaWsDao.VersionSistema() en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 161
2018-01-05 14:28:19,097 [ID (null)] [5] ERROR comun_controles_cabecera - Se generó una excepción : El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
2018-01-05 14:28:22,468 [ID (null)] [5] ERROR InvocaWsDao - en VersionSistema se produjo el siguiente error => System.InvalidOperationException: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
   en System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   en System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   en AuxiliaresWS.AuxiliaresWS.VersionSistema() en c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_WebReferences.arugxzqd.2.cs:línea 142
   en InvocaWsDao.VersionSistema() en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 161
2018-01-05 14:28:22,468 [ID (null)] [5] ERROR comun_controles_cabecera - Se generó una excepción : El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
2018-01-05 14:28:25,714 [ID (null)] [5] ERROR InvocaWsDao - en VersionSistema se produjo el siguiente error => System.InvalidOperationException: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
   en System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   en System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   en AuxiliaresWS.AuxiliaresWS.VersionSistema() en c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_WebReferences.arugxzqd.2.cs:línea 142
   en InvocaWsDao.VersionSistema() en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 161
2018-01-05 14:28:25,715 [ID (null)] [5] ERROR comun_controles_cabecera - Se generó una excepción : El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.
Error de la solicitud con el mensaje de error:
--
<!DOCTYPE html>
<html>
    <head>
        <title>Error de compilación</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
         @media screen and (max-width: 639px) {
          pre { width: 440px; overflow: auto; white-space: pre-wrap; word-wrap: break-word; }
         }
         @media screen and (max-width: 479px) {
          pre { width: 280px; }
         }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>

            <h2> <i>Error de compilación</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.
            <br><br>

            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos<br><br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 1125:                //(lo necesita para poder impersonar el thread nuevo)
Línea 1126:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();
<font color=red>Línea 1127:                return objdao.TraeSolicitudesProvisorias(anio, mes, codPais, codPrestacion, soloProvisorias);
</font>Línea 1128:
Línea 1129:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs
               <b>Línea:</b>  1127
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div>
<div id="warningDiv" style="display: none;">
<b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br>
<b>Error de código fuente:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

Línea 307:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)
Línea 308:        {
<font color=red>Línea 309:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs
</font>Línea 310:            try
Línea 311:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.DataAnnotations\v4.0_4.0.0.0__31bf3856ad364e35\System.ComponentModel.DataAnnotations.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\81ef144a\ea4670fd_236dce01\UsuarioDirector.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.WorkflowServices\v4.0_4.0.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.DataSetExtensions\v4.0_4.0.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activation\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activation.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\23c779c6\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.Activities.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.DynamicData\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.DynamicData.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.IdentityModel\v4.0_4.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_2.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\d3d00640\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Services\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.VisualStudio.Web.PageInspector.Loader\v4.0_1.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Web.PageInspector.Loader.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\8fa14754\03fce230_4486d301\Convenios_Negocio.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.ApplicationServices\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.ApplicationServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\ba60ee9d\dcf964f0_4fb7cb01\LoggingAnsesSQL.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\b4931192\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel\v4.0_4.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\94ef9c83\da874c0e_246dce01\Anses.Director.Session.lib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.Extensions\v4.0_4.0.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\cb9086bd\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\3c7b4b38\0007d6f7_ebb5c801\Microsoft.Practices.Unity.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Web.WebPages.Deployment\v4.0_1.0.0.0__31bf3856ad364e35\System.Web.WebPages.Deployment.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Web\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_32\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\a9233e1c\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.dll" /R:"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Activities\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Activities.dll" /out:"C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.dll" /debug- /optimize+ /w:4 /nowarn:1659;1699;1701;612;618 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.0.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.1.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.2.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.3.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.4.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.5.cs" "C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.m6v1ujaw.6.cs"


Compilador de Microsoft (R) Visual C#, versión 4.0.30319.18408

para Microsoft (R) .NET Framework 4.5
(C) Microsoft Corporation. Reservados todos los derechos.

c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(309,50): warning CS0164: No existe ninguna referencia a esta etiqueta
c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(1127,24): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesProvisorias' toma '5' argumentos
c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1bfa849a\80b6b24e_4a86d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:  Línea 140:  Línea 141:          [WebMethod(Description = "Trae listado de Beneficiarios por cuip")]Línea 142:          public List<LsBeneficiario> TraeBeneficiariosXCUIP(string preCUIP, string docCUIP, string digCUIP)Línea 143:          {Línea 144:              ActoresDatos objdao = new ActoresDatos();Línea 145:              tryLínea 146:              {Línea 147:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 148:                  //(lo necesita para poder impersonar el thread nuevo)Línea 149:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 150:                  return objdao.TraeBeneficiariosXCUIP(preCUIP, docCUIP, digCUIP);Línea 151:  Línea 152:              }Línea 153:              catch (Exception ex)Línea 154:              {Línea 155:  Línea 156:                  throw ex;Línea 157:              }Línea 158:              finallyLínea 159:              {Línea 160:                  objdao.Dispose();Línea 161:              }Línea 162:          }Línea 163:  Línea 164:  Línea 165:          [WebMethod(Description = "Trae de Beneficiarios por solicitudprovisoria")]Línea 166:          public List<LsBeneficiario> TraeBeneficiariosXNroSolicitudProvisoria(string nro_SolicitudProvisoria)Línea 167:          {Línea 168:              ActoresDatos objdao = new ActoresDatos();Línea 169:              tryLínea 170:              {Línea 171:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 172:                  //(lo necesita para poder impersonar el thread nuevo)Línea 173:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 174:                  return objdao.TraeBeneficiariosXNroSolicitudProvisoria(nro_SolicitudProvisoria);Línea 175:  Línea 176:              }Línea 177:              catch (Exception ex)Línea 178:              {Línea 179:                  throw ex;Línea 180:              }Línea 181:              finallyLínea 182:              {Línea 183:                  objdao.Dispose();Línea 184:              }Línea 185:          }Línea 186:  Línea 187:          Línea 188:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 189:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 190:          {Línea 191:              ActoresDatos objdao = new ActoresDatos();Línea 192:              tryLínea 193:              {Línea 194:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 195:                  //(lo necesita para poder impersonar el thread nuevo)Línea 196:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 197:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 198:              }Línea 199:              catch (Exception ex)Línea 200:              {Línea 201:                  Línea 202:                  throw ex;Línea 203:              }Línea 204:              finallyLínea 205:              {Línea 206:                  objdao.Dispose();Línea 207:              }Línea 208:          }Línea 209:  Línea 210:          [WebMethod(Description = "Trae datos de un Beneficioario completos por idBeneficiario")]Línea 211:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 212:          {Línea 213:              ActorDatos objdao = new ActorDatos();Línea 214:              tryLínea 215:              {Línea 216:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 217:                  //(lo necesita para poder impersonar el thread nuevo)Línea 218:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 219:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 220:  Línea 221:              }Línea 222:              catch (Exception ex)Línea 223:              {Línea 224:                  Línea 225:                  throw ex;Línea 226:              }Línea 227:              finallyLínea 228:              {Línea 229:                  objdao.Dispose();Línea 230:              }Línea 231:          }Línea 232:  Línea 233:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 234:          public LsBeneficiario TraeBeneficiarioSimpleXId(Int64 idBeneficiario)Línea 235:          {Línea 236:              ActorDatos objdao = new ActorDatos();Línea 237:              tryLínea 238:              {Línea 239:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 240:                  //(lo necesita para poder impersonar el thread nuevo)Línea 241:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 242:                  return objdao.TraeBeneficiarioSimpleXID(idBeneficiario);Línea 243:  Línea 244:              }Línea 245:              catch (Exception ex)Línea 246:              {Línea 247:  Línea 248:                  throw ex;Línea 249:              }Línea 250:              finallyLínea 251:              {Línea 252:                  objdao.Dispose();Línea 253:              }Línea 254:          }Línea 255:  Línea 256:  Línea 257:  Línea 258:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 259:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 260:          {Línea 261:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 262:              tryLínea 263:              {Línea 264:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 265:                  //(lo necesita para poder impersonar el thread nuevo)Línea 266:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 267:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 268:  Línea 269:              }Línea 270:              catch (Exception ex)Línea 271:              {Línea 272:  Línea 273:                  throw ex;Línea 274:              }Línea 275:              finallyLínea 276:              {Línea 277:                  objdao.Dispose();Línea 278:              }Línea 279:          }Línea 280:  Línea 281:  Línea 282:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 283:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 284:          {Línea 285:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 286:              tryLínea 287:              {Línea 288:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 289:                  //(lo necesita para poder impersonar el thread nuevo)Línea 290:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 291:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 292:  Línea 293:              }Línea 294:              catch (Exception ex)Línea 295:              {Línea 296:  Línea 297:                  throw ex;Línea 298:              }Línea 299:              finallyLínea 300:              {Línea 301:                  objdao.Dispose();Línea 302:              }Línea 303:          }Línea 304:  Línea 305:  Línea 306:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 307:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 308:          {Línea 309:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 310:              tryLínea 311:              {Línea 312:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 313:                  //(lo necesita para poder impersonar el thread nuevo)Línea 314:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 315:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 316:  Línea 317:              }Línea 318:              catch (Exception ex)Línea 319:              {Línea 320:  Línea 321:                  throw ex;Línea 322:              }Línea 323:              finallyLínea 324:              {Línea 325:                  objdao.Dispose();Línea 326:              }Línea 327:          }Línea 328:  Línea 329:  Línea 330:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 331:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 332:          {Línea 333:              ActorDatos objdao = new ActorDatos();Línea 334:              tryLínea 335:              {Línea 336:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 337:                  //(lo necesita para poder impersonar el thread nuevo)Línea 338:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 339:                  objdao.AMBeneficiarioNotas(iParam);Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          Línea 353:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 354:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 355:          {Línea 356:              ActorDatos objdao = new ActorDatos();Línea 357:              Int64 idBeneficiario;Línea 358:              //LogAplicaciones logging = new LogAplicaciones();Línea 359:              tryLínea 360:              {   Línea 361:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 362:                  //(lo necesita para poder impersonar el thread nuevo)Línea 363:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 364:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 365:  Línea 366:                  //graba rutina del logLínea 367:                      //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 370:                  //    Datos = iBeneficiario,Línea 371:                  //    Tabla = "Beneficiarios",Línea 372:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  return idBeneficiario;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  throw ex;Línea 380:              }Línea 381:              finallyLínea 382:              {Línea 383:                  objdao.Dispose();Línea 384:              }Línea 385:          }Línea 386:  Línea 387:  Línea 388:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 389:          public void AMCausante(Causante iCausante)Línea 390:          {Línea 391:              ActorDatos objdao = new ActorDatos();Línea 392:              //LogAplicaciones logging = new LogAplicaciones();Línea 393:              tryLínea 394:              {Línea 395:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 396:                  //(lo necesita para poder impersonar el thread nuevo)Línea 397:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 398:                  objdao.AMCausante(iCausante);Línea 399:  Línea 400:                  //logging.Log(new OnlineLogLínea 401:                  //{Línea 402:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 403:                  //    Datos = iCausante,Línea 404:                  //    Tabla = "Causantes",Línea 405:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 406:                  //});Línea 407:                  Línea 408:              }Línea 409:              catch (Exception ex)Línea 410:              {Línea 411:                  Línea 412:                  throw ex;Línea 413:              }Línea 414:              finallyLínea 415:              {Línea 416:                  objdao.Dispose();Línea 417:              }Línea 418:          }Línea 419:  Línea 420:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 421:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 422:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 423:          {Línea 424:              Línea 425:              ActorDatos objdao = new ActorDatos();Línea 426:              //Int64 idApod;Línea 427:              //LogAplicaciones logging = new LogAplicaciones();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 434:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 435:                  //logging.Log(new OnlineLogLínea 436:                  //{Línea 437:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 438:                  //    Datos = iApoderado,Línea 439:                  //    Tabla = "Apoderados",Línea 440:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 441:                  //});    Línea 442:  Línea 443:                  //return idApod;Línea 444:              }Línea 445:              catch (Exception ex)Línea 446:              {Línea 447:                  Línea 448:                  throw ex;Línea 449:              }Línea 450:              finallyLínea 451:              {Línea 452:                  objdao.Dispose();Línea 453:              }Línea 454:          }Línea 455:  Línea 456:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 457:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 458:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 459:          {Línea 460:  Línea 461:              ActorDatos objdao = new ActorDatos();Línea 462:              //Int64 idApod;Línea 463:              //LogAplicaciones logging = new LogAplicaciones();Línea 464:              tryLínea 465:              {Línea 466:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 467:                  //(lo necesita para poder impersonar el thread nuevo)Línea 468:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 469:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 470:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 471:                  //logging.Log(new OnlineLogLínea 472:                  //{Línea 473:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 474:                  //    Datos = iApoderado,Línea 475:                  //    Tabla = "Apoderados",Línea 476:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 477:                  //});    Línea 478:  Línea 479:                  //return idApod;Línea 480:              }Línea 481:              catch (Exception ex)Línea 482:              {Línea 483:  Línea 484:                  throw ex;Línea 485:              }Línea 486:              finallyLínea 487:              {Línea 488:                  objdao.Dispose();Línea 489:              }Línea 490:          }Línea 491:  Línea 492:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 493:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 494:          {Línea 495:              ActoresDatos objdao = new ActoresDatos();Línea 496:              tryLínea 497:              {Línea 498:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 499:                  //(lo necesita para poder impersonar el thread nuevo)Línea 500:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 501:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 502:  Línea 503:              }Línea 504:              catch (Exception ex)Línea 505:              {Línea 506:  Línea 507:                  throw ex;Línea 508:              }Línea 509:              finallyLínea 510:              {Línea 511:                  objdao.Dispose();Línea 512:              }Línea 513:          }Línea 514:  Línea 515:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 516:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 517:          {Línea 518:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 519:  Línea 520:              tryLínea 521:              {Línea 522:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 523:                  //(lo necesita para poder impersonar el thread nuevo)Línea 524:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 525:  Línea 526:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 527:  Línea 528:              }Línea 529:              catch (Exception ex)Línea 530:              {Línea 531:                  throw ex;Línea 532:              }Línea 533:              finallyLínea 534:              {Línea 535:                  objDao.Dispose();Línea 536:              }Línea 537:  Línea 538:          }Línea 539:  Línea 540:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 541:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 542:          {Línea 543:              MovimientosDatos objDao = new MovimientosDatos();Línea 544:  Línea 545:              tryLínea 546:              {Línea 547:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 548:                  //(lo necesita para poder impersonar el thread nuevo)Línea 549:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 550:  Línea 551:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 552:  Línea 553:              }Línea 554:              catch (Exception ex)Línea 555:              {Línea 556:                  throw ex;Línea 557:              }Línea 558:              finallyLínea 559:              {Línea 560:                  objDao.Dispose();Línea 561:              }Línea 562:  Línea 563:          }Línea 564:  Línea 565:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 566:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 567:          {Línea 568:              MovimientosDatos objDao = new MovimientosDatos();Línea 569:  Línea 570:              tryLínea 571:              {Línea 572:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 573:                  //(lo necesita para poder impersonar el thread nuevo)Línea 574:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 575:  Línea 576:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 577:  Línea 578:              }Línea 579:              catch (Exception ex)Línea 580:              {Línea 581:                  throw ex;Línea 582:              }Línea 583:              finallyLínea 584:              {Línea 585:                  objDao.Dispose();Línea 586:              }Línea 587:  Línea 588:          }Línea 589:  Línea 590:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 591:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 592:          {Línea 593:              MovimientosDatos objDao = new MovimientosDatos();Línea 594:  Línea 595:              tryLínea 596:              {Línea 597:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 598:                  //(lo necesita para poder impersonar el thread nuevo)Línea 599:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 600:  Línea 601:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 602:  Línea 603:              }Línea 604:              catch (Exception ex)Línea 605:              {Línea 606:                  throw ex;Línea 607:              }Línea 608:              finallyLínea 609:              {Línea 610:                  objDao.Dispose();Línea 611:              }Línea 612:  Línea 613:          }Línea 614:  Línea 615:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 616:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 617:          {Línea 618:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 619:  Línea 620:              tryLínea 621:              {Línea 622:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 623:                  //(lo necesita para poder impersonar el thread nuevo)Línea 624:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 625:  Línea 626:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 627:  Línea 628:              }Línea 629:              catch (Exception ex)Línea 630:              {Línea 631:                  throw ex;Línea 632:              }Línea 633:              finallyLínea 634:              {Línea 635:                  objDao.Dispose();Línea 636:              }Línea 637:  Línea 638:          }Línea 639:  Línea 640:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 641:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 642:          {Línea 643:              MovimientosDatos objDao = new MovimientosDatos();Línea 644:              //LogAplicaciones logging = new LogAplicaciones();Línea 645:  Línea 646:              tryLínea 647:              {Línea 648:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 649:                  //(lo necesita para poder impersonar el thread nuevo)Línea 650:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 651:  Línea 652:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 653:                  //logging.Log(new OnlineLogLínea 654:                  //{Línea 655:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 656:                  //    Datos = destino + observaciones + certificado,Línea 657:                  //    Tabla = "Devoluciones",Línea 658:                  //    TipoAccion = TipoAction.AGREGARLínea 659:                  //});    Línea 660:              }Línea 661:              catch (Exception ex)Línea 662:              {Línea 663:                  throw ex;Línea 664:              }Línea 665:              finallyLínea 666:              {Línea 667:                  objDao.Dispose();Línea 668:              }Línea 669:  Línea 670:          }Línea 671:  Línea 672:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 673:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 674:          {Línea 675:              MovimientosDatos objDao = new MovimientosDatos();Línea 676:              //List<String> lDocRepetida;Línea 677:              //LogAplicaciones logging = new LogAplicaciones();Línea 678:  Línea 679:              tryLínea 680:              {Línea 681:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 682:                  //(lo necesita para poder impersonar el thread nuevo)Línea 683:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 684:  Línea 685:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 686:                  //logging.Log(new OnlineLogLínea 687:                  //{Línea 688:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 689:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 690:                  //    Tabla = "Ingresos",Línea 691:                  //    TipoAccion = TipoAction.AGREGARLínea 692:                  //});    Línea 693:                  //return lDocRepetida;Línea 694:  Línea 695:              }Línea 696:              catch (Exception ex)Línea 697:              {Línea 698:                  throw ex;Línea 699:              }Línea 700:              finallyLínea 701:              {Línea 702:                  objDao.Dispose();Línea 703:              }Línea 704:  Línea 705:          }Línea 706:  Línea 707:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 708:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion,Int16 codPais, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 709:          {Línea 710:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 711:              //LogAplicaciones logging = new LogAplicaciones();Línea 712:  Línea 713:              tryLínea 714:              {Línea 715:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 716:                  //(lo necesita para poder impersonar el thread nuevo)Línea 717:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 718:  Línea 719:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, codPais, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 720:                  //logging.Log(new OnlineLogLínea 721:                  //{Línea 722:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 723:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 724:                  //    Tabla = "Movimientos_Solicitud",Línea 725:                  //    TipoAccion = TipoAction.AGREGARLínea 726:                  //});    Línea 727:              }Línea 728:              catch (Exception ex)Línea 729:              {Línea 730:                  throw ex;Línea 731:              }Línea 732:              finallyLínea 733:              {Línea 734:                  objDao.Dispose();Línea 735:              }Línea 736:  Línea 737:          }Línea 738:  Línea 739:  Línea 740:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 741:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 742:          {Línea 743:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 744:              //LogAplicaciones logging = new LogAplicaciones();Línea 745:  Línea 746:              tryLínea 747:              {Línea 748:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 749:                  //(lo necesita para poder impersonar el thread nuevo)Línea 750:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 751:  Línea 752:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 753:                  //logging.Log(new OnlineLogLínea 754:                  //{Línea 755:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 756:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 757:                  //    Tabla = "Movimientos_Solicitud",Línea 758:                  //    TipoAccion = TipoAction.AGREGARLínea 759:                  //});    Línea 760:              }Línea 761:              catch (Exception ex)Línea 762:              {Línea 763:                  throw ex;Línea 764:              }Línea 765:              finallyLínea 766:              {Línea 767:                  objDao.Dispose();Línea 768:              }Línea 769:  Línea 770:          }Línea 771:  Línea 772:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 773:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 774:          {Línea 775:              MovimientosDatos objDao = new MovimientosDatos();Línea 776:              //LogAplicaciones logging = new LogAplicaciones();Línea 777:  Línea 778:              tryLínea 779:              {Línea 780:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 781:                  //(lo necesita para poder impersonar el thread nuevo)Línea 782:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 783:  Línea 784:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 785:                  //logging.Log(new OnlineLogLínea 786:                  //{Línea 787:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 788:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 789:                  //    Tabla = "Movimientos_Solicitud",Línea 790:                  //    TipoAccion = TipoAction.AGREGARLínea 791:                  //});    Línea 792:              }Línea 793:              catch (Exception ex)Línea 794:              {Línea 795:                  throw ex;Línea 796:              }Línea 797:              finallyLínea 798:              {Línea 799:                  objDao.Dispose();Línea 800:              }Línea 801:  Línea 802:          }Línea 803:  Línea 804:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 805:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 806:          {Línea 807:              MovimientosDatos objDao = new MovimientosDatos();Línea 808:              //LogAplicaciones logging = new LogAplicaciones();Línea 809:  Línea 810:              tryLínea 811:              {Línea 812:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 813:                  //(lo necesita para poder impersonar el thread nuevo)Línea 814:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 815:  Línea 816:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 817:                  //logging.Log(new OnlineLogLínea 818:                  //{Línea 819:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 820:                  //    Datos = fechaNotificacion,Línea 821:                  //    Tabla = "Devoluciones",Línea 822:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 823:                  //});    Línea 824:              }Línea 825:              catch (Exception ex)Línea 826:              {Línea 827:                  throw ex;Línea 828:              }Línea 829:              finallyLínea 830:              {Línea 831:                  objDao.Dispose();Línea 832:              }Línea 833:  Línea 834:          }Línea 835:  Línea 836:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 837:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 838:          {Línea 839:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 840:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 841:  Línea 842:          }Línea 843:  Línea 844:  Línea 845:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 846:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 847:          {Línea 848:              MovimientosDatos objDao = new MovimientosDatos();Línea 849:              //LogAplicaciones logging = new LogAplicaciones();Línea 850:  Línea 851:              tryLínea 852:              {Línea 853:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 854:                  //(lo necesita para poder impersonar el thread nuevo)Línea 855:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 856:  Línea 857:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 858:                  //logging.Log(new OnlineLogLínea 859:                  //{Línea 860:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 861:                  //    Datos = fechaPresentacion,Línea 862:                  //    Tabla = "Devoluciones",Línea 863:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 864:                  //});    Línea 865:              }Línea 866:              catch (Exception ex)Línea 867:              {Línea 868:                  throw ex;Línea 869:              }Línea 870:              finallyLínea 871:              {Línea 872:                  objDao.Dispose();Línea 873:              }Línea 874:  Línea 875:          }Línea 876:  Línea 877:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 878:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 879:          {Línea 880:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 881:  Línea 882:              tryLínea 883:              {Línea 884:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 885:                  //(lo necesita para poder impersonar el thread nuevo)Línea 886:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 887:  Línea 888:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 889:  Línea 890:              }Línea 891:              catch (Exception ex)Línea 892:              {Línea 893:                  throw ex;Línea 894:              }Línea 895:              finallyLínea 896:              {Línea 897:                  objDao.Dispose();Línea 898:              }Línea 899:  Línea 900:          }Línea 901:  Línea 902:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 903:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 904:          {Línea 905:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 906:  Línea 907:              tryLínea 908:              {Línea 909:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 910:                  //(lo necesita para poder impersonar el thread nuevo)Línea 911:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 912:  Línea 913:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 914:  Línea 915:              }Línea 916:              catch (Exception ex)Línea 917:              {Línea 918:                  throw ex;Línea 919:              }Línea 920:              finallyLínea 921:              {Línea 922:                  objDao.Dispose();Línea 923:              }Línea 924:  Línea 925:          }Línea 926:  Línea 927:  Línea 928:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 929:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 930:          {Línea 931:              IngresosDatos objDao = new IngresosDatos();Línea 932:  Línea 933:              tryLínea 934:              {Línea 935:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 936:                  //(lo necesita para poder impersonar el thread nuevo)Línea 937:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 938:  Línea 939:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 940:  Línea 941:              }Línea 942:              catch (Exception ex)Línea 943:              {Línea 944:                  throw ex;Línea 945:              }Línea 946:              finallyLínea 947:              {Línea 948:                  objDao.Dispose();Línea 949:              }Línea 950:  Línea 951:          }Línea 952:  Línea 953:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 954:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 955:          {Línea 956:              IngresosDatos objDao = new IngresosDatos();Línea 957:  Línea 958:              tryLínea 959:              {Línea 960:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 961:                  //(lo necesita para poder impersonar el thread nuevo)Línea 962:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 963:  Línea 964:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 965:  Línea 966:              }Línea 967:              catch (Exception ex)Línea 968:              {Línea 969:                  throw ex;Línea 970:              }Línea 971:              finallyLínea 972:              {Línea 973:                  objDao.Dispose();Línea 974:              }Línea 975:  Línea 976:          }Línea 977:  Línea 978:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 979:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 980:          {Línea 981:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 982:  Línea 983:              tryLínea 984:              {Línea 985:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 986:                  //(lo necesita para poder impersonar el thread nuevo)Línea 987:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 988:  Línea 989:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 990:  Línea 991:              }Línea 992:              catch (Exception ex)Línea 993:              {Línea 994:                  throw ex;Línea 995:              }Línea 996:              finallyLínea 997:              {Línea 998:                  objDao.Dispose();Línea 999:              }Línea 1000:         }Línea 1001: Línea 1002:         [WebMethod(Description = "Devuelve true si existe el documento")]Línea 1003:         public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 1004:         {Línea 1005:             ActorDatos objdao = new ActorDatos();Línea 1006:             tryLínea 1007:             {Línea 1008:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1009:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1010:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1011:                 return objdao.ExisteDocumento(doc, tdoc);Línea 1012: Línea 1013:             }Línea 1014:             catch (Exception ex)Línea 1015:             {Línea 1016:                 throw ex;Línea 1017:             }Línea 1018:             finallyLínea 1019:             {Línea 1020:                 objdao.Dispose();Línea 1021:             }Línea 1022:         }Línea 1023: Línea 1024: Línea 1025:         #region Solictudes provisoriasLínea 1026: Línea 1027:         [WebMethod(Description = "Ingresa una solicitud provisoria para un beneficiario sin cuil, con los movimientos")]Línea 1028:         public String SolicitudProvisoria_Alta(SolicitudProvisoria iSolicitudProvisoria)Línea 1029:         {Línea 1030:             String newNroSolicitud;Línea 1031:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1032:             tryLínea 1033:             {Línea 1034:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1035:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1036:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1037:                 objdao.SolicitudProvisoria_Alta(iSolicitudProvisoria, out newNroSolicitud);Línea 1038:                 return newNroSolicitud;Línea 1039:             }Línea 1040:             catch (Exception ex)Línea 1041:             {Línea 1042:                 throw ex;Línea 1043:             }Línea 1044:             finallyLínea 1045:             {Línea 1046:                 objdao.Dispose();Línea 1047:             }Línea 1048:         }Línea 1049: Línea 1050: Línea 1051:         [WebMethod(Description = "Ingresa la lista de movimientos de una solicitud provisoria")]Línea 1052:         public void SolicitudesProvisoriaMovimiento_Alta(List<SolicitudProvisoriaMovimiento> iMovimientosSolicitudProvisoria)Línea 1053:         {Línea 1054:             SolicitudesDatos objdao = new SolicitudesDatos();Línea 1055:             tryLínea 1056:             {Línea 1057:                 // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 1058:                 //(lo necesita para poder impersonar el thread nuevo)Línea 1059:                 WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 1060:                 objdao.SolicitudesProvisoriaMovimiento_Alta(iMovimientosSolicitudProvisoria);Línea 1061:             }Línea 1062:             catch
--.
2018-01-05 14:34:35,114 [ID (null)] [14] ERROR InvocaWsDao - en VersionSistema se produjo el siguiente error => System.Net.WebException: Se excedió el tiempo de espera de la operación
   en System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest request)
   en System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(WebRequest request)
   en System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   en AuxiliaresWS.AuxiliaresWS.VersionSistema() en c:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_WebReferences.arugxzqd.2.cs:línea 142
   en InvocaWsDao.VersionSistema() en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 161
2018-01-05 14:34:35,136 [ID (null)] [14] ERROR comun_controles_cabecera - Se generó una excepción : Se excedió el tiempo de espera de la operación
2018-01-05 14:35:22,924 [ID (null)] [34] ERROR global_asax - ID Error       : -214463160
Mensaje Error : System.Collections.Generic.List`1[ActoresWS.SolicitudProvisoria] TraeSolicitudesProvisorias(System.String, System.String, System.Nullable`1[System.Int16], System.Nullable`1[System.Int16], Boolean, System.String ByRef) - Error:System.Web.Services->System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Exception: Error en Solicitudes.Datos System.Collections.Generic.List`1[Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio.SolicitudProvisoria] TraeSolicitudesProvisorias(System.String, System.String, System.Nullable`1[System.Int16], System.Nullable`1[System.Int16], Boolean, Int32) ---> System.IndexOutOfRangeException: DiasVence
   en System.Data.ProviderBase.FieldNameLookup.GetOrdinal(String fieldName)
   en System.Data.SqlClient.SqlDataReader.GetOrdinal(String name)
   en NullableReaders.NullableDataReader.GetNullableInt32(String name) en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\NullableDataReader.cs:línea 357
   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.SolicitudesDatos.Fill(SolicitudProvisoria& oObj, NullableDataReader dr) en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Solicitudes.Datos.cs:línea 0
   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.SolicitudesDatos.TraeSolicitudesProvisorias(String anio, String mes, Nullable`1 codPais, Nullable`1 codPrestacion, Boolean soloProvisorias, Int32 plazoDiasCaducidad) en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Solicitudes.Datos.cs:línea 887
   --- Fin del seguimiento de la pila de la excepción interna ---
   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.ActoresWS.TraeSolicitudesProvisorias(String anio, String mes, Nullable`1 codPais, Nullable`1 codPrestacion, Boolean soloProvisorias, Int32 diasPlazoCaducidad)
   --- Fin del seguimiento de la pila de la excepción interna ---
Stack     :    en InvocaWsDao.TraeSolicitudesProvisorias(String anio, String mes, Nullable`1 codPais, Nullable`1 codPrestacion, Boolean soloProvisorias, String& mensaje) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 1874
   en Paginas_ConsultaTProvisorios.btnConsultar_Click(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\Paginas\ConsultaTProvisorios.aspx.cs:línea 286
   en System.Web.UI.WebControls.Button.OnClick(EventArgs e)
   en System.Web.UI.WebControls.Button.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.WebControls.Button.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(IPostBackEventHandler sourceControl, String eventArgument)
   en System.Web.UI.Page.RaisePostBackEvent(NameValueCollection postData)
   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)

2018-01-05 15:30:38,795 [ID (null)] [9] ERROR MasterPage - 7503-Error en sesión.No se puede obtener credenciales
Anses.Director.Session.DirSessionExepcion: 7503-Error en sesión.No se puede obtener credenciales
   en Anses.Director.Session.Credencial.ObtenerCredencial()
   en MasterPage.Page_Init(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\MasterPage\MasterPage.master.cs:línea 144
2018-01-05 15:30:38,870 [ID (null)] [9] ERROR DirectorManager - En consultarDirector 7503-Error en sesión.No se puede obtener credenciales
2018-01-05 15:30:38,871 [ID (null)] [9] ERROR Paginas_Main - Error al cargar la pagina Main.aspx error: Subproceso anulado.
