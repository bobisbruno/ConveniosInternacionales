2017-09-05 11:08:07,611 [ID (null)] [6] ERROR InvocaWsDao - en VersionSistema se produjo el siguiente error => System.InvalidOperationException: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.   en System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)   en System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)   en AuxiliaresWS.AuxiliaresWS.VersionSistema() en c:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_WebReferences.zfxhmi_e.7.cs:línea 142   en InvocaWsDao.VersionSistema() en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 1572017-09-05 11:08:07,676 [ID (null)] [6] ERROR comun_controles_cabecera - Se generó una excepción : El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 11:08:07,830 [ID (null)] [6] ERROR InvocaWsDao - TraerTiposDocumento: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.vhzveyuj.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 11:08:17,829 [ID (null)] [8] ERROR InvocaWsDao - TraerTiposDocumento: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 11:08:17,840 [ID (null)] [8] ERROR InvocaWsDao - TraerPrestaciones: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 11:08:18,239 [ID (null)] [8] ERROR InvocaWsDao - TraerPaises: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 11:08:18,251 [ID (null)] [8] ERROR InvocaWsDao - TraerEstados: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 11:08:18,280 [ID (null)] [8] ERROR InvocaWsDao - TraerPaises: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 11:08:18,291 [ID (null)] [8] ERROR InvocaWsDao - Traer_TipoIngreso: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 11:08:18,309 [ID (null)] [8] ERROR InvocaWsDao - TraerSectores: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 11:08:18,371 [ID (null)] [8] ERROR InvocaWsDao - en VersionSistema se produjo el siguiente error => System.InvalidOperationException: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.   en System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)   en System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)   en AuxiliaresWS.AuxiliaresWS.VersionSistema() en c:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_WebReferences.zfxhmi_e.7.cs:línea 142   en InvocaWsDao.VersionSistema() en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\App_Code\InvocaWsDao.cs:línea 1572017-09-05 11:08:18,372 [ID (null)] [8] ERROR comun_controles_cabecera - Se generó una excepción : El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.gfsfkyyb.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 11:09:33,190 [ID (null)] [8] ERROR InvocaWsDao - ExisteDocumento: El cliente encontró el tipo de contenido de respuesta 'text/html; charset=utf-8', pero se esperaba 'text/xml'.Error de la solicitud con el mensaje de error:--<html>    <head>        <title>Error de compilación</title>        <style>         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;}          p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }         pre {font-family:"Lucida Console";font-size: .9em}         .marker {font-weight: bold; color: black;text-decoration: none;}         .version {color: gray;}         .error {margin-bottom: 10px;}         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }        </style>    </head>    <body bgcolor="white">            <span><H1>Error de servidor en la aplicación '/Convenios_WS'.<hr width=100% size=1 color=silver></H1>            <h2> <i>Error de compilación</i> </h2></span>            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">            <b> Descripción: </b>Error durante la compilación de un recurso requerido para dar servicio a esta solicitud. Revise los detalles de error específicos siguientes y modifique el código fuente en consecuencia.            <br><br>            <b> Mensaje de error del compilador: </b>CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos<br><br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>                              </td></tr>               <tr>                  <td>                      <code><pre>Línea 649:                WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:<font color=red>Línea 651:                objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);</font>Línea 652:                //logging.Log(new OnlineLogLínea 653:                //{</pre></code>                  </td>               </tr>            </table>            <br>            <b>Archivo de origen:</b> c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs               <b>Línea:</b>  651            <br><br><br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">Mensajes de advertencia del compilador:</div><div id="warningDiv" style="display: none;"><b>Advertencia:</b> CS0164: No existe ninguna referencia a esta etiqueta<br><b>Error de código fuente:</b><br><br>            <table width=100% bgcolor="#ffffcc">               <tr><td>               <b>c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs</b>               </td></tr>               <tr>                  <td>                      <code><pre>Línea 239:        public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:        {<font color=red>Línea 241:            ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.cs</font>Línea 242:            tryLínea 243:            {</pre></code>                  </td>               </tr>            </table>            <br></div><br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">Mostrar los resultados del compilador detallados:</div><div id="compilerOutputDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>c:\windows\system32\inetsrv> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\451153d7\e2ff7d97_6a55c901\Microsoft.Practices.EnterpriseLibrary.Common.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\385a5b0a\5e9c717b_9125d301\Convenios_Negocio.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1f234d77\00d1a360_6f9cc701\Microsoft.Practices.ObjectBuilder.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\1b4be021\00e2341c_f2b5c801\Microsoft.Practices.EnterpriseLibrary.Data.SqlCe.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2cbe4385\ea4670fd_236dce01\UsuarioDirector.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\2e461244\0007d6f7_ebb5c801\Microsoft.Practices.Unity.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\600db54b\0007d6f7_ebb5c801\Microsoft.Practices.ObjectBuilder2.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\30bf0fa1\da874c0e_246dce01\Anses.Director.Session.lib.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\7b1d343d\dcf964f0_4fb7cb01\LoggingAnsesSQL.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\f7abe4da\54c9719a_6a55c901\Microsoft.Practices.EnterpriseLibrary.Data.DLL" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.x1thbobz.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.x1thbobz.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.x1thbobz.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.x1thbobz.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.x1thbobz.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.x1thbobz.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.x1thbobz.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\App_Code.x1thbobz.6.cs"Compilador de Microsoft (R) Visual C# 2008, versión 3.5.30729.5420para Microsoft (R) .NET Framework, versión 3.5(C) Microsoft Corporation. Reservados todos los derechos.c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(241,50): warning CS0164: No existe ninguna referencia a esta etiquetac:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651,17): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ConsultasWS.cs(70,27): error CS1501: Ninguna sobrecarga para el método 'TraeSolicitudesEFechasSolicitud' acepta '2' argumentosc:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_ws\6b9c3adb\33dd1393\assembly\dl3\167fac81\a9ca0b7f_9125d301\Convenios_Datos.DLL: (Ubicación del símbolo relacionado con el error anterior)</pre></code>                  </td>               </tr>            </table>            </div><br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">Mostrar el código fuente de la compilación completo:</div><div id="dynamicCodeDiv" style="display: none;">            <br><table width=100% bgcolor="#ffffcc">               <tr>                  <td>                      <code><pre>Línea 1:    using System;Línea 2:    using System.Web;Línea 3:    using System.Collections;Línea 4:    using System.Collections.Generic;Línea 5:    using System.Web.Services;Línea 6:    using System.Web.Services.Protocols;Línea 7:    using System.Security.Principal;Línea 8:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio;Línea 9:    using Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos;Línea 10:   using LoggingAnses.Servicio;Línea 11:   using LoggingAnses.Servicio.Entidad;Línea 12:   Línea 13:   Línea 14:   namespace Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.ServiciosLínea 15:   {Línea 16:       /// <summary>Línea 17:       /// Brinda servicios de ConsultaLínea 18:       /// </summary>Línea 19:       [WebService(Namespace = "http://AnsesConveniosInternacionalesX5.anses.gov.ar")]Línea 20:       [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]Línea 21:   Línea 22:       public class ActoresWS : System.Web.Services.WebServiceLínea 23:       {Línea 24:           Línea 25:   Línea 26:           public ActoresWS()Línea 27:           {Línea 28:   Línea 29:               //Uncomment the following line if using designed components Línea 30:               //InitializeComponent(); Línea 31:           }Línea 32:   Línea 33:           Línea 34:           [WebMethod(Description = "Trae listado de Beneficioarios por Nombre - Documento (Beneficiario o Causante) - ExpedienteExterno SIACI")]Línea 35:           public List<LsBeneficiario> TraeBeneficiarios(TipoConsultaBeneficioario iTipoCons, String parametro, String codDoc)Línea 36:           {Línea 37:               ActoresDatos objdao = new ActoresDatos();Línea 38:               tryLínea 39:               {Línea 40:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 41:                   //(lo necesita para poder impersonar el thread nuevo)Línea 42:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 43:                   return objdao.TraeBeneficiarios(iTipoCons, parametro, codDoc);Línea 44:   Línea 45:               }Línea 46:               catch (Exception ex)Línea 47:               {Línea 48:                   throw ex;Línea 49:               }Línea 50:               finallyLínea 51:               {Línea 52:                   objdao.Dispose();Línea 53:               }Línea 54:           }Línea 55:   Línea 56:           [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 57:           public List<LsBeneficiario> TraeBeneficiariosXExpteANSES(string expediente_orgLínea 58:               , string expediente_precuLínea 59:               , string expediente_doccuLínea 60:               , string expediente_digcuLínea 61:               , string expediente_ctipoLínea 62:               , string expediente_sec)Línea 63:           {Línea 64:               ActoresDatos objdao = new ActoresDatos();Línea 65:               tryLínea 66:               {Línea 67:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 68:                   //(lo necesita para poder impersonar el thread nuevo)Línea 69:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 70:                   return objdao.TraeBeneficiariosXExpteANSES( expediente_orgLínea 71:               ,  expediente_precuLínea 72:               ,  expediente_doccuLínea 73:               ,  expediente_digcuLínea 74:               ,  expediente_ctipoLínea 75:               ,  expediente_sec);Línea 76:   Línea 77:               }Línea 78:               catch (Exception ex)Línea 79:               {Línea 80:                   Línea 81:                   throw ex;Línea 82:               }Línea 83:               finallyLínea 84:               {Línea 85:                   objdao.Dispose();Línea 86:               }Línea 87:           }Línea 88:   Línea 89:           [WebMethod(Description = "Trae Beneficios de una Peticion")]Línea 90:   Línea 91:           public List<Beneficio_Solicitud> TraeBeneficiosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 92:           {Línea 93:               SolicitudesDatos objDao = new SolicitudesDatos();Línea 94:   Línea 95:               tryLínea 96:               {Línea 97:                   // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 98:                   //(lo necesita para poder impersonar el thread nuevo)Línea 99:                   WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 100:  Línea 101:                  return objDao.TraeBeneficiosXSolicitud(id_Beneficiario, codPrestacion);Línea 102:  Línea 103:              }Línea 104:              catch (Exception ex)Línea 105:              {Línea 106:                  throw ex;Línea 107:              }Línea 108:              finallyLínea 109:              {Línea 110:                  objDao.Dispose();Línea 111:              }Línea 112:  Línea 113:          }Línea 114:  Línea 115:          [WebMethod(Description = "Trae Expedientes de una Peticion")]Línea 116:          public List<Expediente_Solicitud> TraeExpedientesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 117:          {Línea 118:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 119:  Línea 120:              tryLínea 121:              {Línea 122:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 123:                  //(lo necesita para poder impersonar el thread nuevo)Línea 124:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 125:  Línea 126:                  return objDao.TraeExpedientesXSolicitud(id_Beneficiario, codPrestacion);Línea 127:  Línea 128:              }Línea 129:              catch (Exception ex)Línea 130:              {Línea 131:                  throw ex;Línea 132:              }Línea 133:              finallyLínea 134:              {Línea 135:                  objDao.Dispose();Línea 136:              }Línea 137:  Línea 138:          }Línea 139:          Línea 140:  Línea 141:  Línea 142:          Línea 143:          [WebMethod(Description = "Trae listado de Beneficioarios por Expediente ANSES")]Línea 144:          public List<LsBeneficiario> TraeBeneficiariosXNroBeneficioANSES(string BenExCaja, string BenTipo, string BenNumero, string BenCopart, string BenDigVerif)Línea 145:          {Línea 146:              ActoresDatos objdao = new ActoresDatos();Línea 147:              tryLínea 148:              {Línea 149:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 150:                  //(lo necesita para poder impersonar el thread nuevo)Línea 151:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 152:                  return objdao.TraeBeneficiariosXNroBeneficioANSES( BenExCaja,  BenTipo,  BenNumero,  BenCopart,  BenDigVerif);Línea 153:  Línea 154:              }Línea 155:              catch (Exception ex)Línea 156:              {Línea 157:                  Línea 158:                  throw ex;Línea 159:              }Línea 160:              finallyLínea 161:              {Línea 162:                  objdao.Dispose();Línea 163:              }Línea 164:          }Línea 165:  Línea 166:          [WebMethod(Description = "Trae datos de un Beneficioario por idBeneficiario")]Línea 167:          public Beneficiario TraeBeneficiarioXId(Int64 idBeneficiario)Línea 168:          {Línea 169:              ActorDatos objdao = new ActorDatos();Línea 170:              tryLínea 171:              {Línea 172:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 173:                  //(lo necesita para poder impersonar el thread nuevo)Línea 174:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 175:                  return objdao.TraeBeneficiarioXID(idBeneficiario);Línea 176:  Línea 177:              }Línea 178:              catch (Exception ex)Línea 179:              {Línea 180:                  Línea 181:                  throw ex;Línea 182:              }Línea 183:              finallyLínea 184:              {Línea 185:                  objdao.Dispose();Línea 186:              }Línea 187:          }Línea 188:  Línea 189:  Línea 190:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 191:          public List<PrestacionBeneficiario> TraePrestacionesXIdBeneficiario(Int64 idBeneficiario)Línea 192:          {Línea 193:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 194:              tryLínea 195:              {Línea 196:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 197:                  //(lo necesita para poder impersonar el thread nuevo)Línea 198:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 199:                  return objdao.TraePrestacionesXIdBeneficiario(idBeneficiario);Línea 200:  Línea 201:              }Línea 202:              catch (Exception ex)Línea 203:              {Línea 204:  Línea 205:                  throw ex;Línea 206:              }Línea 207:              finallyLínea 208:              {Línea 209:                  objdao.Dispose();Línea 210:              }Línea 211:          }Línea 212:  Línea 213:  Línea 214:          [WebMethod(Description = "Trae las solicitudes de un Beneficioario por idBeneficiario")]Línea 215:          public List<Solicitud> TraeSolicitudesXIdBenefPrestac(Int64 idBeneficiario, Int16 codPrestacion)Línea 216:          {Línea 217:              SolicitudesDatos objdao = new SolicitudesDatos();Línea 218:              tryLínea 219:              {Línea 220:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 221:                  //(lo necesita para poder impersonar el thread nuevo)Línea 222:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 223:                  return objdao.TraeSolicitudesXIdBenefPrestac(idBeneficiario, codPrestacion);Línea 224:  Línea 225:              }Línea 226:              catch (Exception ex)Línea 227:              {Línea 228:  Línea 229:                  throw ex;Línea 230:              }Línea 231:              finallyLínea 232:              {Línea 233:                  objdao.Dispose();Línea 234:              }Línea 235:          }Línea 236:  Línea 237:  Línea 238:          [WebMethod(Description = "Trae notas ingresadas por idBeneficiario")]Línea 239:          public List<BeneficiarioNotas> TraeBeneficiario_Notas(Int64 idBeneficiario)Línea 240:          {Línea 241:              ActorDatos objdao = new ActorDatos();http://10.86.36.116/Convenios_WS/App_Code/BancoWS.csLínea 242:              tryLínea 243:              {Línea 244:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 245:                  //(lo necesita para poder impersonar el thread nuevo)Línea 246:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 247:                  return objdao.TraeBeneficiario_Notas(idBeneficiario);Línea 248:  Línea 249:              }Línea 250:              catch (Exception ex)Línea 251:              {Línea 252:  Línea 253:                  throw ex;Línea 254:              }Línea 255:              finallyLínea 256:              {Línea 257:                  objdao.Dispose();Línea 258:              }Línea 259:          }Línea 260:  Línea 261:  Línea 262:          [WebMethod(Description = "Ingresa una nota para un idBeneficiario")]Línea 263:          public void AMBeneficiario_Notas(BeneficiarioNotas iParam)Línea 264:          {Línea 265:              ActorDatos objdao = new ActorDatos();Línea 266:              tryLínea 267:              {Línea 268:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 269:                  //(lo necesita para poder impersonar el thread nuevo)Línea 270:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 271:                  objdao.AMBeneficiarioNotas(iParam);Línea 272:              }Línea 273:              catch (Exception ex)Línea 274:              {Línea 275:  Línea 276:                  throw ex;Línea 277:              }Línea 278:              finallyLínea 279:              {Línea 280:                  objdao.Dispose();Línea 281:              }Línea 282:          }Línea 283:  Línea 284:          Línea 285:          [WebMethod(Description = "Ingresa o Modifica datos de un Beneficiario")]Línea 286:          public Int64  AMBeneficiario(Beneficiario iBeneficiario)Línea 287:          {Línea 288:              ActorDatos objdao = new ActorDatos();Línea 289:              Int64 idBeneficiario;Línea 290:              //LogAplicaciones logging = new LogAplicaciones();Línea 291:              tryLínea 292:              {   Línea 293:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 294:                  //(lo necesita para poder impersonar el thread nuevo)Línea 295:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 296:                  objdao.AMBeneficiario(iBeneficiario, out idBeneficiario);Línea 297:  Línea 298:                  //graba rutina del logLínea 299:                      //logging.Log(new OnlineLogLínea 300:                  //{Línea 301:                  //    ClavePrincipal = iBeneficiario.IdBeneficio.HasValue ? iBeneficiario.IdBeneficio.ToString() : "",Línea 302:                  //    Datos = iBeneficiario,Línea 303:                  //    Tabla = "Beneficiarios",Línea 304:                  //    TipoAccion = iBeneficiario.IdBeneficio.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 305:                  //});    Línea 306:  Línea 307:                  return idBeneficiario;Línea 308:              }Línea 309:              catch (Exception ex)Línea 310:              {Línea 311:                  throw ex;Línea 312:              }Línea 313:              finallyLínea 314:              {Línea 315:                  objdao.Dispose();Línea 316:              }Línea 317:          }Línea 318:  Línea 319:  Línea 320:          [WebMethod(Description = "Ingresa o Modifica datos de un Causante")]Línea 321:          public void AMCausante(Causante iCausante)Línea 322:          {Línea 323:              ActorDatos objdao = new ActorDatos();Línea 324:              //LogAplicaciones logging = new LogAplicaciones();Línea 325:              tryLínea 326:              {Línea 327:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 328:                  //(lo necesita para poder impersonar el thread nuevo)Línea 329:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 330:                  objdao.AMCausante(iCausante);Línea 331:  Línea 332:                  //logging.Log(new OnlineLogLínea 333:                  //{Línea 334:                  //    ClavePrincipal = iCausante.Id_causante.ToString(),Línea 335:                  //    Datos = iCausante,Línea 336:                  //    Tabla = "Causantes",Línea 337:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 338:                  //});Línea 339:                  Línea 340:              }Línea 341:              catch (Exception ex)Línea 342:              {Línea 343:                  Línea 344:                  throw ex;Línea 345:              }Línea 346:              finallyLínea 347:              {Línea 348:                  objdao.Dispose();Línea 349:              }Línea 350:          }Línea 351:  Línea 352:          [WebMethod(Description = "Ingresa o Modifica datos de un Apoderado")]Línea 353:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 354:          public void AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 355:          {Línea 356:              Línea 357:              ActorDatos objdao = new ActorDatos();Línea 358:              //Int64 idApod;Línea 359:              //LogAplicaciones logging = new LogAplicaciones();Línea 360:              tryLínea 361:              {Línea 362:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 363:                  //(lo necesita para poder impersonar el thread nuevo)Línea 364:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 365:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 366:                  objdao.AMApoderado(iApoderado, idBeneficiario);Línea 367:                  //logging.Log(new OnlineLogLínea 368:                  //{Línea 369:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 370:                  //    Datos = iApoderado,Línea 371:                  //    Tabla = "Apoderados",Línea 372:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 373:                  //});    Línea 374:  Línea 375:                  //return idApod;Línea 376:              }Línea 377:              catch (Exception ex)Línea 378:              {Línea 379:                  Línea 380:                  throw ex;Línea 381:              }Línea 382:              finallyLínea 383:              {Línea 384:                  objdao.Dispose();Línea 385:              }Línea 386:          }Línea 387:  Línea 388:          [WebMethod(Description = "Establece la baja de un Apoderado")]Línea 389:          //public Int64 AMApoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 390:          public void BajaBeneficiario_Apoderado(Apoderado iApoderado, Int64 idBeneficiario)Línea 391:          {Línea 392:  Línea 393:              ActorDatos objdao = new ActorDatos();Línea 394:              //Int64 idApod;Línea 395:              //LogAplicaciones logging = new LogAplicaciones();Línea 396:              tryLínea 397:              {Línea 398:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 399:                  //(lo necesita para poder impersonar el thread nuevo)Línea 400:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 401:                  //objdao.AMApoderado(iApoderado, out idApod, idBeneficiario);Línea 402:                  objdao.BajaBeneficiario_Apoderado(iApoderado, idBeneficiario);Línea 403:                  //logging.Log(new OnlineLogLínea 404:                  //{Línea 405:                  //    ClavePrincipal = iApoderado.Id_apoderado.HasValue ? iApoderado.Id_apoderado.ToString() : "",Línea 406:                  //    Datos = iApoderado,Línea 407:                  //    Tabla = "Apoderados",Línea 408:                  //    TipoAccion = iApoderado.Id_apoderado.HasValue ? TipoAction.ACTUALIZAR : TipoAction.AGREGARLínea 409:                  //});    Línea 410:  Línea 411:                  //return idApod;Línea 412:              }Línea 413:              catch (Exception ex)Línea 414:              {Línea 415:  Línea 416:                  throw ex;Línea 417:              }Línea 418:              finallyLínea 419:              {Línea 420:                  objdao.Dispose();Línea 421:              }Línea 422:          }Línea 423:  Línea 424:          [WebMethod(Description = "Trae apoderados por idBeneficiario")]Línea 425:          public List<Apoderado> TraeApoderadosXid_Beneficiario(Int64 id_Beneficiario)Línea 426:          {Línea 427:              ActoresDatos objdao = new ActoresDatos();Línea 428:              tryLínea 429:              {Línea 430:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 431:                  //(lo necesita para poder impersonar el thread nuevo)Línea 432:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 433:                  return objdao.TraeApoderadosXid_Beneficiario(id_Beneficiario);Línea 434:  Línea 435:              }Línea 436:              catch (Exception ex)Línea 437:              {Línea 438:  Línea 439:                  throw ex;Línea 440:              }Línea 441:              finallyLínea 442:              {Línea 443:                  objdao.Dispose();Línea 444:              }Línea 445:          }Línea 446:  Línea 447:          [WebMethod(Description = "TraePrestacionesNoIngresadasXIdBeneficiario")]Línea 448:          public List<Prestacion> TraePrestacionesNoIngresadasXIdBeneficiario(Int64 idBeneficiario)Línea 449:          {Línea 450:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 451:  Línea 452:              tryLínea 453:              {Línea 454:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 455:                  //(lo necesita para poder impersonar el thread nuevo)Línea 456:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 457:  Línea 458:                  return objDao.TraePrestacionesNoIngresadasXIdBeneficiario(idBeneficiario);Línea 459:  Línea 460:              }Línea 461:              catch (Exception ex)Línea 462:              {Línea 463:                  throw ex;Línea 464:              }Línea 465:              finallyLínea 466:              {Línea 467:                  objDao.Dispose();Línea 468:              }Línea 469:  Línea 470:          }Línea 471:  Línea 472:          [WebMethod(Description = "Trae movimientos resumen por benef y prestacion")]Línea 473:          public List<IngDevMov> TraeMovimientosResumen(Int64 idBeneficiario, Int16 codPrestacion)Línea 474:          {Línea 475:              MovimientosDatos objDao = new MovimientosDatos();Línea 476:  Línea 477:              tryLínea 478:              {Línea 479:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 480:                  //(lo necesita para poder impersonar el thread nuevo)Línea 481:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 482:  Línea 483:                  return objDao.TraeMovimientosResumen(idBeneficiario, codPrestacion);Línea 484:  Línea 485:              }Línea 486:              catch (Exception ex)Línea 487:              {Línea 488:                  throw ex;Línea 489:              }Línea 490:              finallyLínea 491:              {Línea 492:                  objDao.Dispose();Línea 493:              }Línea 494:  Línea 495:          }Línea 496:  Línea 497:          [WebMethod(Description = "Trae Movimiento de una solicitud por fecha de movimiento")]Línea 498:          public Movimiento_Solicitud TraeMovimientoXFechaMovimiento(Int64 idBeneficiario, Int16 codPrestacion, String FechaMovimiento)Línea 499:          {Línea 500:              MovimientosDatos objDao = new MovimientosDatos();Línea 501:  Línea 502:              tryLínea 503:              {Línea 504:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 505:                  //(lo necesita para poder impersonar el thread nuevo)Línea 506:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 507:  Línea 508:                  return objDao.TraeMovimientoXFechaMovimiento(idBeneficiario, codPrestacion, FechaMovimiento);Línea 509:  Línea 510:              }Línea 511:              catch (Exception ex)Línea 512:              {Línea 513:                  throw ex;Línea 514:              }Línea 515:              finallyLínea 516:              {Línea 517:                  objDao.Dispose();Línea 518:              }Línea 519:  Línea 520:          }Línea 521:  Línea 522:          [WebMethod(Description = "Trae Movimientos de una solicitud")]Línea 523:          public List<Movimiento_Solicitud> TraeMovimientosXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 524:          {Línea 525:              MovimientosDatos objDao = new MovimientosDatos();Línea 526:  Línea 527:              tryLínea 528:              {Línea 529:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 530:                  //(lo necesita para poder impersonar el thread nuevo)Línea 531:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 532:  Línea 533:                  return objDao.TraeMovimientosXSolicitud(idBeneficiario, codPrestacion);Línea 534:  Línea 535:              }Línea 536:              catch (Exception ex)Línea 537:              {Línea 538:                  throw ex;Línea 539:              }Línea 540:              finallyLínea 541:              {Línea 542:                  objDao.Dispose();Línea 543:              }Línea 544:  Línea 545:          }Línea 546:  Línea 547:          [WebMethod(Description = "Trae Solicitudes Denegadas X Solicitud")]Línea 548:          public List<SolicitudDenegada> TraeSolicitudesDenegadasXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 549:          {Línea 550:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 551:  Línea 552:              tryLínea 553:              {Línea 554:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 555:                  //(lo necesita para poder impersonar el thread nuevo)Línea 556:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 557:  Línea 558:                  return objDao.TraeSolicitudesDenegadasXSolicitud(idBeneficiario, codPrestacion);Línea 559:  Línea 560:              }Línea 561:              catch (Exception ex)Línea 562:              {Línea 563:                  throw ex;Línea 564:              }Línea 565:              finallyLínea 566:              {Línea 567:                  objDao.Dispose();Línea 568:              }Línea 569:  Línea 570:          }Línea 571:  Línea 572:          [WebMethod(Description = "Efectua el alta de una devolucion sin notificar grabando la documentacion")]Línea 573:          public void AltaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String destino, String observaciones, String certificado, List<TipoDocumentacion> iListTipoDocumentacion)Línea 574:          {Línea 575:              MovimientosDatos objDao = new MovimientosDatos();Línea 576:              //LogAplicaciones logging = new LogAplicaciones();Línea 577:  Línea 578:              tryLínea 579:              {Línea 580:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 581:                  //(lo necesita para poder impersonar el thread nuevo)Línea 582:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 583:  Línea 584:                  objDao.AltaDevolucion(id_Beneficiario, codPrestacion, destino, observaciones, certificado, iListTipoDocumentacion);Línea 585:                  //logging.Log(new OnlineLogLínea 586:                  //{Línea 587:                  //    ClavePrincipal = id_Beneficiario.ToString()+codPrestacion.ToString(),Línea 588:                  //    Datos = destino + observaciones + certificado,Línea 589:                  //    Tabla = "Devoluciones",Línea 590:                  //    TipoAccion = TipoAction.AGREGARLínea 591:                  //});    Línea 592:              }Línea 593:              catch (Exception ex)Línea 594:              {Línea 595:                  throw ex;Línea 596:              }Línea 597:              finallyLínea 598:              {Línea 599:                  objDao.Dispose();Línea 600:              }Línea 601:  Línea 602:          }Línea 603:  Línea 604:          [WebMethod(Description = "Efectua el alta de un ingreso de documentacion guardando la documentacion ingresada")]Línea 605:          public void AltaIngreso(Int64 id_Beneficiario, Int16 codPrestacion, String fIngreso, Byte? idTipoIngreso, List<TipoDocumentacion> iListTipoDocumentacion, String observacion)Línea 606:          {Línea 607:              MovimientosDatos objDao = new MovimientosDatos();Línea 608:              //List<String> lDocRepetida;Línea 609:              //LogAplicaciones logging = new LogAplicaciones();Línea 610:  Línea 611:              tryLínea 612:              {Línea 613:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 614:                  //(lo necesita para poder impersonar el thread nuevo)Línea 615:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 616:  Línea 617:                  objDao.AltaIngreso(id_Beneficiario, codPrestacion, fIngreso, idTipoIngreso, iListTipoDocumentacion, observacion);Línea 618:                  //logging.Log(new OnlineLogLínea 619:                  //{Línea 620:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 621:                  //    Datos = idTipoIngreso.HasValue ? idTipoIngreso.Value.ToString() : "",Línea 622:                  //    Tabla = "Ingresos",Línea 623:                  //    TipoAccion = TipoAction.AGREGARLínea 624:                  //});    Línea 625:                  //return lDocRepetida;Línea 626:  Línea 627:              }Línea 628:              catch (Exception ex)Línea 629:              {Línea 630:                  throw ex;Línea 631:              }Línea 632:              finallyLínea 633:              {Línea 634:                  objDao.Dispose();Línea 635:              }Línea 636:  Línea 637:          }Línea 638:  Línea 639:          [WebMethod(Description = "Efectua el alta de una solicitud mas listado de expedientes y beneficios")]Línea 640:          public void AMAllDatosSolicitud(Int64 idBenef, Int16 codPrestacion, List<Solicitud> ilSolicitud, List<Expediente_Solicitud> ilExpediente, List<Beneficio_Solicitud> ilBeneficio, List<Ingresos> iLingresos, List<Devolucion> iLdevolucion, List<Movimiento_Solicitud> ilMovimientos)Línea 641:          {Línea 642:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 643:              //LogAplicaciones logging = new LogAplicaciones();Línea 644:  Línea 645:              tryLínea 646:              {Línea 647:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 648:                  //(lo necesita para poder impersonar el thread nuevo)Línea 649:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 650:  Línea 651:                  objDao.AMAllDatosSolicitud(idBenef, codPrestacion, ilSolicitud, ilExpediente, ilBeneficio, iLingresos, iLdevolucion, ilMovimientos);Línea 652:                  //logging.Log(new OnlineLogLínea 653:                  //{Línea 654:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 655:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 656:                  //    Tabla = "Movimientos_Solicitud",Línea 657:                  //    TipoAccion = TipoAction.AGREGARLínea 658:                  //});    Línea 659:              }Línea 660:              catch (Exception ex)Línea 661:              {Línea 662:                  throw ex;Línea 663:              }Línea 664:              finallyLínea 665:              {Línea 666:                  objDao.Dispose();Línea 667:              }Línea 668:  Línea 669:          }Línea 670:  Línea 671:  Línea 672:          [WebMethod(Description = "Efectua la baja logica de una solicitud, que posteriormente puede volver a seleccionarse")]Línea 673:          public void BajaSolicitud(Int64 idBenef, Int16 codPrestacion)Línea 674:          {Línea 675:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 676:              //LogAplicaciones logging = new LogAplicaciones();Línea 677:  Línea 678:              tryLínea 679:              {Línea 680:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 681:                  //(lo necesita para poder impersonar el thread nuevo)Línea 682:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 683:  Línea 684:                  objDao.BajaSolicitud(idBenef, codPrestacion);Línea 685:                  //logging.Log(new OnlineLogLínea 686:                  //{Línea 687:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 688:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 689:                  //    Tabla = "Movimientos_Solicitud",Línea 690:                  //    TipoAccion = TipoAction.AGREGARLínea 691:                  //});    Línea 692:              }Línea 693:              catch (Exception ex)Línea 694:              {Línea 695:                  throw ex;Línea 696:              }Línea 697:              finallyLínea 698:              {Línea 699:                  objDao.Dispose();Línea 700:              }Línea 701:  Línea 702:          }Línea 703:  Línea 704:          [WebMethod(Description = "Efectua el alta de un movimiento del tramite")]Línea 705:          public void AltaMovimiento(Int64 id_Beneficiario, Int16 codPrestacion, Int32 codEstado, Int32 codsector, String observaciones)Línea 706:          {Línea 707:              MovimientosDatos objDao = new MovimientosDatos();Línea 708:              //LogAplicaciones logging = new LogAplicaciones();Línea 709:  Línea 710:              tryLínea 711:              {Línea 712:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 713:                  //(lo necesita para poder impersonar el thread nuevo)Línea 714:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 715:  Línea 716:                  objDao.AltaMovimiento(id_Beneficiario, codPrestacion, codEstado, codsector, observaciones);Línea 717:                  //logging.Log(new OnlineLogLínea 718:                  //{Línea 719:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString(),Línea 720:                  //    Datos = codEstado.ToString() + codsector.ToString() + observaciones,Línea 721:                  //    Tabla = "Movimientos_Solicitud",Línea 722:                  //    TipoAccion = TipoAction.AGREGARLínea 723:                  //});    Línea 724:              }Línea 725:              catch (Exception ex)Línea 726:              {Línea 727:                  throw ex;Línea 728:              }Línea 729:              finallyLínea 730:              {Línea 731:                  objDao.Dispose();Línea 732:              }Línea 733:  Línea 734:          }Línea 735:  Línea 736:          [WebMethod(Description = "Notifica una devolucion para establecer el control de plazo")]Línea 737:          public void NotificaDevolucion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaNotificacion)Línea 738:          {Línea 739:              MovimientosDatos objDao = new MovimientosDatos();Línea 740:              //LogAplicaciones logging = new LogAplicaciones();Línea 741:  Línea 742:              tryLínea 743:              {Línea 744:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 745:                  //(lo necesita para poder impersonar el thread nuevo)Línea 746:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 747:  Línea 748:                  objDao.NotificaDevolucion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaNotificacion);Línea 749:                  //logging.Log(new OnlineLogLínea 750:                  //{Línea 751:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 752:                  //    Datos = fechaNotificacion,Línea 753:                  //    Tabla = "Devoluciones",Línea 754:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 755:                  //});    Línea 756:              }Línea 757:              catch (Exception ex)Línea 758:              {Línea 759:                  throw ex;Línea 760:              }Línea 761:              finallyLínea 762:              {Línea 763:                  objDao.Dispose();Línea 764:              }Línea 765:  Línea 766:          }Línea 767:  Línea 768:          [WebMethod(Description = "Trae listado de tipo de Documentacion por prestacion")]Línea 769:          public List<TipoDocumentacion> TraeTipoDocumentacionXPrestacion(Int16 codPrestacion)Línea 770:          {Línea 771:              AuxiliaresDatos objdao = new AuxiliaresDatos();Línea 772:              return objdao.TraeTipoDocumentacionXPrestacion(codPrestacion);Línea 773:  Línea 774:          }Línea 775:  Línea 776:  Línea 777:          [WebMethod(Description = "Establece fecha de entrega de Documentacion para una devolucion")]Línea 778:          public void ModificaDevolucion_SetFPresentacion(Int64 id_Beneficiario, Int16 codPrestacion, String fechaMovimiento, String fechaPresentacion)Línea 779:          {Línea 780:              MovimientosDatos objDao = new MovimientosDatos();Línea 781:              //LogAplicaciones logging = new LogAplicaciones();Línea 782:  Línea 783:              tryLínea 784:              {Línea 785:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 786:                  //(lo necesita para poder impersonar el thread nuevo)Línea 787:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 788:  Línea 789:                  objDao.ModificaDevolucion_SetFPresentacion(id_Beneficiario, codPrestacion, fechaMovimiento, fechaPresentacion);Línea 790:                  //logging.Log(new OnlineLogLínea 791:                  //{Línea 792:                  //    ClavePrincipal = id_Beneficiario.ToString() + codPrestacion.ToString() + fechaMovimiento,Línea 793:                  //    Datos = fechaPresentacion,Línea 794:                  //    Tabla = "Devoluciones",Línea 795:                  //    TipoAccion = TipoAction.ACTUALIZARLínea 796:                  //});    Línea 797:              }Línea 798:              catch (Exception ex)Línea 799:              {Línea 800:                  throw ex;Línea 801:              }Línea 802:              finallyLínea 803:              {Línea 804:                  objDao.Dispose();Línea 805:              }Línea 806:  Línea 807:          }Línea 808:  Línea 809:          [WebMethod(Description = "Trae devolucion por fecha de devolucion")]Línea 810:          public Devolucion TraeDevolucionXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 811:          {Línea 812:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 813:  Línea 814:              tryLínea 815:              {Línea 816:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 817:                  //(lo necesita para poder impersonar el thread nuevo)Línea 818:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 819:  Línea 820:                  return objDao.TraeDevolucionXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 821:  Línea 822:              }Línea 823:              catch (Exception ex)Línea 824:              {Línea 825:                  throw ex;Línea 826:              }Línea 827:              finallyLínea 828:              {Línea 829:                  objDao.Dispose();Línea 830:              }Línea 831:  Línea 832:          }Línea 833:  Línea 834:          [WebMethod(Description = "Trae devoluciones X Solicitud")]Línea 835:          public List<Devolucion> TraeDevolucionesXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 836:          {Línea 837:              DevolucionesDatos objDao = new DevolucionesDatos();Línea 838:  Línea 839:              tryLínea 840:              {Línea 841:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 842:                  //(lo necesita para poder impersonar el thread nuevo)Línea 843:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 844:  Línea 845:                  return objDao.TraeDevolucionesXSolicitud(id_Beneficiario, codPrestacion);Línea 846:  Línea 847:              }Línea 848:              catch (Exception ex)Línea 849:              {Línea 850:                  throw ex;Línea 851:              }Línea 852:              finallyLínea 853:              {Línea 854:                  objDao.Dispose();Línea 855:              }Línea 856:  Línea 857:          }Línea 858:  Línea 859:  Línea 860:          [WebMethod(Description = "Trae ingresos por solicitud con documentación recibida")]Línea 861:          public List<Ingresos> TraeIngresosXSolicitud(Int64 id_Beneficiario, Int16 codPrestacion)Línea 862:          {Línea 863:              IngresosDatos objDao = new IngresosDatos();Línea 864:  Línea 865:              tryLínea 866:              {Línea 867:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 868:                  //(lo necesita para poder impersonar el thread nuevo)Línea 869:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 870:  Línea 871:                  return objDao.TraeIngresosXSolicitud(id_Beneficiario, codPrestacion);Línea 872:  Línea 873:              }Línea 874:              catch (Exception ex)Línea 875:              {Línea 876:                  throw ex;Línea 877:              }Línea 878:              finallyLínea 879:              {Línea 880:                  objDao.Dispose();Línea 881:              }Línea 882:  Línea 883:          }Línea 884:  Línea 885:          [WebMethod(Description = "Trae ingreso por fecha de devolucion")]Línea 886:          public Ingresos TraeIngresoXMovimientoSolicitud(Int64 id_Beneficiario, Int16 codPrestacion, String fMovimiento)Línea 887:          {Línea 888:              IngresosDatos objDao = new IngresosDatos();Línea 889:  Línea 890:              tryLínea 891:              {Línea 892:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 893:                  //(lo necesita para poder impersonar el thread nuevo)Línea 894:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 895:  Línea 896:                  return objDao.TraeIngresoXMovimientoSolicitud(id_Beneficiario, codPrestacion, fMovimiento);Línea 897:  Línea 898:              }Línea 899:              catch (Exception ex)Línea 900:              {Línea 901:                  throw ex;Línea 902:              }Línea 903:              finallyLínea 904:              {Línea 905:                  objDao.Dispose();Línea 906:              }Línea 907:  Línea 908:          }Línea 909:  Línea 910:          [WebMethod(Description = "Trae Documentacion faltante por solicitud")]Línea 911:          public List<TipoDocumentacion_Prestacion> TraeTipoDocumentacionFaltanteXSolicitud(Int64 idBeneficiario, Int16 codPrestacion)Línea 912:          {Línea 913:              SolicitudesDatos objDao = new SolicitudesDatos();Línea 914:  Línea 915:              tryLínea 916:              {Línea 917:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 918:                  //(lo necesita para poder impersonar el thread nuevo)Línea 919:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 920:  Línea 921:                  return objDao.TraeTipoDocumentacionFaltanteXSolicitud(idBeneficiario, codPrestacion);Línea 922:  Línea 923:              }Línea 924:              catch (Exception ex)Línea 925:              {Línea 926:                  throw ex;Línea 927:              }Línea 928:              finallyLínea 929:              {Línea 930:                  objDao.Dispose();Línea 931:              }Línea 932:          }Línea 933:  Línea 934:          [WebMethod(Description = "Devuelve true si existe el documento")]Línea 935:          public Boolean ExisteDocumento(String doc, Int16 tdoc)Línea 936:          {Línea 937:              ActorDatos objdao = new ActorDatos();Línea 938:              tryLínea 939:              {Línea 940:                  // Creo un Objeto Windows Identity para enviarle al thread asyncronicoLínea 941:                  //(lo necesita para poder impersonar el thread nuevo)Línea 942:                  WindowsIdentity mThreadIdentity = WindowsIdentity.GetCurrent();Línea 943:                  return objdao.ExisteDocumento(doc, tdoc);Línea 944:  Línea 945:              }Línea 946:              catch (Exception ex)Línea 947:              {Línea 948:                  throw ex;Línea 949:              }Línea 950:              finallyLínea 951:              {Línea 952:                  objdao.Dispose();Línea 953:              }Línea 954:          }Línea 955:  Línea 956:          Línea 957:      }Línea 958:  }</pre></code>                  </td>               </tr>            </table>            </div>    <script type="text/javascript">    function OnToggleTOCLevel1(level2ID)    {      var elemLevel2 = document.getElementById(level2ID);      if (elemLevel2.style.display == 'none')      {        elemLevel2.style.display = '';      }      else {        elemLevel2.style.display = 'none';      }    }    </script>                          <br><br>            <hr width=100% size=1 color=silver>            <b>Información de versión:</b> Versión de Microsoft .NET Framework:2.0.50727.8669; Versión ASP.NET:2.0.50727.5491            </font>    </body></html><!-- [HttpCompileException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.Compilation.AssemblyBuilder.Compile()   en System.Web.Compilation.BuildProvidersCompiler.PerformBuild()   en System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)   en System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)   en System.Web.Compilation.BuildManager.CompileCodeDirectories()   en System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()   en System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)[HttpException]: c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs(651): error CS1501: Ninguna sobrecarga para el método 'AMAllDatosSolicitud' acepta '8' argumentos   en System.Web.HttpRuntime.FirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)   en System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context)-->--.2017-09-05 13:09:10,138 [ID (null)] [8] ERROR InvocaWsDao - TraerTiposDocumento: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Exception: Error en Auxiliares.Datos System.Collections.Generic.List`1[Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio.TipoDocumento] Traer_TipoDocumento(Boolean) ---> System.Data.SqlClient.SqlException: Error relacionado con la red o específico de la instancia mientras se establecía una conexión con el servidor SQL Server. No se encontró el servidor o éste no estaba accesible. Compruebe que el nombre de la instancia es correcto y que SQL Server está configurado para admitir conexiones remotas. (provider: Interfaces de red SQL, error: 26 - Error al buscar el servidor o instancia especificado)   en System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection)   en System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj)   en System.Data.SqlClient.TdsParser.Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, Boolean ignoreSniOpenTimeout, Int64 timerExpire, Boolean encrypt, Boolean trustServerCert, Boolean integratedSecurity, SqlConnection owningObject, Boolean withFailover)   en System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, Boolean ignoreSniOpenTimeout, Int64 timerExpire, SqlConnection owningObject, Boolean withFailover)   en System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(String host, String newPassword, Boolean redirectedUserInstance, SqlConnection owningObject, SqlConnectionString connectionOptions, Int64 timerStart)   en System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(SqlConnection owningObject, SqlConnectionString connectionOptions, String newPassword, Boolean redirectedUserInstance)   en System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, Object providerInfo, String newPassword, SqlConnection owningObject, Boolean redirectedUserInstance)   en System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnection owningConnection, DbConnectionPool pool, DbConnectionOptions options)   en System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)   en System.Data.SqlClient.SqlConnection.Open()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetNewOpenConnection()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetOpenConnection(Boolean disposeInnerConnection)   en Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(DbCommand command)   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.AuxiliaresDatos.Traer_TipoDocumento(Boolean soloFrecuentes) en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Auxiliares.Datos.cs:línea 269   --- Fin del seguimiento de la pila de la excepción interna ---   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.AuxiliaresWS.Traer_TipoDocumento(Boolean soloFrecuentes) en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\AuxiliaresWS.cs:línea 242   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:09:38,399 [ID (null)] [7] ERROR InvocaWsDao - TraerTiposDocumento: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Exception: Error en Auxiliares.Datos System.Collections.Generic.List`1[Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio.TipoDocumento] Traer_TipoDocumento(Boolean) ---> System.Data.SqlClient.SqlException: Error relacionado con la red o específico de la instancia mientras se establecía una conexión con el servidor SQL Server. No se encontró el servidor o éste no estaba accesible. Compruebe que el nombre de la instancia es correcto y que SQL Server está configurado para admitir conexiones remotas. (provider: Interfaces de red SQL, error: 26 - Error al buscar el servidor o instancia especificado)   en System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection)   en System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj)   en System.Data.SqlClient.TdsParser.Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, Boolean ignoreSniOpenTimeout, Int64 timerExpire, Boolean encrypt, Boolean trustServerCert, Boolean integratedSecurity, SqlConnection owningObject, Boolean withFailover)   en System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, Boolean ignoreSniOpenTimeout, Int64 timerExpire, SqlConnection owningObject, Boolean withFailover)   en System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(String host, String newPassword, Boolean redirectedUserInstance, SqlConnection owningObject, SqlConnectionString connectionOptions, Int64 timerStart)   en System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(SqlConnection owningObject, SqlConnectionString connectionOptions, String newPassword, Boolean redirectedUserInstance)   en System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, Object providerInfo, String newPassword, SqlConnection owningObject, Boolean redirectedUserInstance)   en System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnection owningConnection, DbConnectionPool pool, DbConnectionOptions options)   en System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)   en System.Data.SqlClient.SqlConnection.Open()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetNewOpenConnection()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetOpenConnection(Boolean disposeInnerConnection)   en Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(DbCommand command)   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.AuxiliaresDatos.Traer_TipoDocumento(Boolean soloFrecuentes) en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Auxiliares.Datos.cs:línea 269   --- Fin del seguimiento de la pila de la excepción interna ---   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.AuxiliaresWS.Traer_TipoDocumento(Boolean soloFrecuentes) en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\AuxiliaresWS.cs:línea 242   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:09:38,428 [ID (null)] [7] ERROR InvocaWsDao - TraerPrestaciones: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Exception: Error en Auxiliares.Datos System.Collections.Generic.List`1[Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio.Prestacion] TraePrestaciones() ---> System.Data.SqlClient.SqlException: Error relacionado con la red o específico de la instancia mientras se establecía una conexión con el servidor SQL Server. No se encontró el servidor o éste no estaba accesible. Compruebe que el nombre de la instancia es correcto y que SQL Server está configurado para admitir conexiones remotas. (provider: Interfaces de red SQL, error: 26 - Error al buscar el servidor o instancia especificado)   en System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)   en System.Data.SqlClient.SqlConnection.Open()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetNewOpenConnection()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetOpenConnection(Boolean disposeInnerConnection)   en Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(DbCommand command)   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.AuxiliaresDatos.TraePrestaciones() en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Auxiliares.Datos.cs:línea 674   --- Fin del seguimiento de la pila de la excepción interna ---   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.AuxiliaresWS.TraerPrestaciones() en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\AuxiliaresWS.cs:línea 49   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:09:39,429 [ID (null)] [7] ERROR InvocaWsDao - TraerPaises: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Exception: Error en Auxiliares.Datos System.Collections.Generic.List`1[Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio.Pais] TraePaises(Boolean) ---> System.Data.SqlClient.SqlException: Error relacionado con la red o específico de la instancia mientras se establecía una conexión con el servidor SQL Server. No se encontró el servidor o éste no estaba accesible. Compruebe que el nombre de la instancia es correcto y que SQL Server está configurado para admitir conexiones remotas. (provider: Interfaces de red SQL, error: 26 - Error al buscar el servidor o instancia especificado)   en System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)   en System.Data.SqlClient.SqlConnection.Open()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetNewOpenConnection()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetOpenConnection(Boolean disposeInnerConnection)   en Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(DbCommand command)   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.PaisesDatos.TraePaises(Boolean conConvenio) en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Pais.Datos.cs:línea 50   --- Fin del seguimiento de la pila de la excepción interna ---   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.PaisWS.TraePaises(Boolean conConvenio) en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\PaisWS.cs:línea 102   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:09:39,436 [ID (null)] [7] ERROR InvocaWsDao - TraerEstados: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Exception: Error en Auxiliares.Datos System.Collections.Generic.List`1[Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio.Estado] TraeEstados() ---> System.Data.SqlClient.SqlException: Error relacionado con la red o específico de la instancia mientras se establecía una conexión con el servidor SQL Server. No se encontró el servidor o éste no estaba accesible. Compruebe que el nombre de la instancia es correcto y que SQL Server está configurado para admitir conexiones remotas. (provider: Interfaces de red SQL, error: 26 - Error al buscar el servidor o instancia especificado)   en System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)   en System.Data.SqlClient.SqlConnection.Open()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetNewOpenConnection()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetOpenConnection(Boolean disposeInnerConnection)   en Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(DbCommand command)   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.AuxiliaresDatos.TraeEstados() en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Auxiliares.Datos.cs:línea 801   --- Fin del seguimiento de la pila de la excepción interna ---   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.AuxiliaresWS.TraeEstados() en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\AuxiliaresWS.cs:línea 259   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:09:39,441 [ID (null)] [7] ERROR InvocaWsDao - TraerPaises: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Exception: Error en Auxiliares.Datos System.Collections.Generic.List`1[Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio.Pais] TraePaises(Boolean) ---> System.Data.SqlClient.SqlException: Error relacionado con la red o específico de la instancia mientras se establecía una conexión con el servidor SQL Server. No se encontró el servidor o éste no estaba accesible. Compruebe que el nombre de la instancia es correcto y que SQL Server está configurado para admitir conexiones remotas. (provider: Interfaces de red SQL, error: 26 - Error al buscar el servidor o instancia especificado)   en System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)   en System.Data.SqlClient.SqlConnection.Open()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetNewOpenConnection()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetOpenConnection(Boolean disposeInnerConnection)   en Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(DbCommand command)   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.PaisesDatos.TraePaises(Boolean conConvenio) en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Pais.Datos.cs:línea 50   --- Fin del seguimiento de la pila de la excepción interna ---   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.PaisWS.TraePaises(Boolean conConvenio) en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\PaisWS.cs:línea 102   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:09:39,448 [ID (null)] [7] ERROR InvocaWsDao - Traer_TipoIngreso: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Exception: Error en Auxiliares.Datos System.Collections.Generic.List`1[Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio.TipoIngreso] Traer_TipoIngreso() ---> System.Data.SqlClient.SqlException: Error relacionado con la red o específico de la instancia mientras se establecía una conexión con el servidor SQL Server. No se encontró el servidor o éste no estaba accesible. Compruebe que el nombre de la instancia es correcto y que SQL Server está configurado para admitir conexiones remotas. (provider: Interfaces de red SQL, error: 26 - Error al buscar el servidor o instancia especificado)   en System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)   en System.Data.SqlClient.SqlConnection.Open()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetNewOpenConnection()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetOpenConnection(Boolean disposeInnerConnection)   en Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(DbCommand command)   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.AuxiliaresDatos.Traer_TipoIngreso() en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Auxiliares.Datos.cs:línea 134   --- Fin del seguimiento de la pila de la excepción interna ---   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.AuxiliaresWS.Traer_TipoIngreso() en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\AuxiliaresWS.cs:línea 94   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:09:39,456 [ID (null)] [7] ERROR InvocaWsDao - TraerSectores: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Exception: Error en Auxiliares.Datos System.Collections.Generic.List`1[Ar.Gov.Anses.Microinformatica.ConveniosX5.Negocio.Sector] TraeSectores() ---> System.Data.SqlClient.SqlException: Error relacionado con la red o específico de la instancia mientras se establecía una conexión con el servidor SQL Server. No se encontró el servidor o éste no estaba accesible. Compruebe que el nombre de la instancia es correcto y que SQL Server está configurado para admitir conexiones remotas. (provider: Interfaces de red SQL, error: 26 - Error al buscar el servidor o instancia especificado)   en System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)   en System.Data.SqlClient.SqlConnection.Open()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetNewOpenConnection()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetOpenConnection(Boolean disposeInnerConnection)   en Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteReader(DbCommand command)   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.AuxiliaresDatos.TraeSectores() en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Auxiliares.Datos.cs:línea 626   --- Fin del seguimiento de la pila de la excepción interna ---   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.AuxiliaresWS.TraeSectores() en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\AuxiliaresWS.cs:línea 161   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:10:03,988 [ID (null)] [9] ERROR InvocaWsDao - ExisteDocumento: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Exception: Error en Actores.Datos Boolean ExisteDocumento(System.String, Int16) ---> System.Data.SqlClient.SqlException: Error relacionado con la red o específico de la instancia mientras se establecía una conexión con el servidor SQL Server. No se encontró el servidor o éste no estaba accesible. Compruebe que el nombre de la instancia es correcto y que SQL Server está configurado para admitir conexiones remotas. (provider: Interfaces de red SQL, error: 26 - Error al buscar el servidor o instancia especificado)   en System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection)   en System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj)   en System.Data.SqlClient.TdsParser.Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, Boolean ignoreSniOpenTimeout, Int64 timerExpire, Boolean encrypt, Boolean trustServerCert, Boolean integratedSecurity, SqlConnection owningObject, Boolean withFailover)   en System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, Boolean ignoreSniOpenTimeout, Int64 timerExpire, SqlConnection owningObject, Boolean withFailover)   en System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(String host, String newPassword, Boolean redirectedUserInstance, SqlConnection owningObject, SqlConnectionString connectionOptions, Int64 timerStart)   en System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(SqlConnection owningObject, SqlConnectionString connectionOptions, String newPassword, Boolean redirectedUserInstance)   en System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, Object providerInfo, String newPassword, SqlConnection owningObject, Boolean redirectedUserInstance)   en System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnection owningConnection, DbConnectionPool pool, DbConnectionOptions options)   en System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionPool.GetConnection(DbConnection owningObject)   en System.Data.ProviderBase.DbConnectionFactory.GetConnection(DbConnection owningConnection)   en System.Data.ProviderBase.DbConnectionClosed.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)   en System.Data.SqlClient.SqlConnection.Open()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetNewOpenConnection()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetOpenConnection(Boolean disposeInnerConnection)   en Microsoft.Practices.EnterpriseLibrary.Data.Database.GetOpenConnection()   en Microsoft.Practices.EnterpriseLibrary.Data.Database.ExecuteNonQuery(DbCommand command)   en Ar.Gov.Anses.Microinformatica.ConveniosX5.Datos.ActorDatos.ExisteDocumento(String doc, Int16 tdoc) en c:\Desarrollos\ConveniosInternacionales\Convenios_Datos\Actores.Datos.cs:línea 1003   --- Fin del seguimiento de la pila de la excepción interna ---   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.ActoresWS.ExisteDocumento(String doc, Int16 tdoc) en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs:línea 948   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:14:17,264 [ID (null)] [8] ERROR InvocaWsDao - ExisteDocumento: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Configuration.ConfigurationErrorsException: The requested database ConveniosInt_V01 is not defined in configuration.   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.ActoresWS.ExisteDocumento(String doc, Int16 tdoc) en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs:línea 948   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:16:37,380 [ID (null)] [8] ERROR InvocaWsDao - ExisteDocumento: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Configuration.ConfigurationErrorsException: The requested database ConveniosInt_V01 is not defined in configuration.   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.ActoresWS.ExisteDocumento(String doc, Int16 tdoc) en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs:línea 948   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:20:56,135 [ID (null)] [7] ERROR InvocaWsDao - ExisteDocumento: System.Web.Services.Protocols.SoapException: El servidor no puede procesar la solicitud. ---> System.Configuration.ConfigurationErrorsException: The requested database ConveniosInt_V01 is not defined in configuration.   en Ar.Gov.Anses.Microinformatica.AnsesConveniosInternacionalesX5.Servicios.ActoresWS.ExisteDocumento(String doc, Int16 tdoc) en c:\Desarrollos\ConveniosInternacionales\Convenios_WS\App_Code\ActoresWS.cs:línea 948   --- Fin del seguimiento de la pila de la excepción interna ---2017-09-05 13:23:10,154 [ID (null)] [5] ERROR global_asax - ID Error       : -674105606Mensaje Error : El archivo '/Convenios_Site/Paginas/ConIndicadoresXEstado.aspx' no existe.Stack     :    en System.Web.UI.Util.CheckVirtualFileExists(VirtualPath virtualPath)   en System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile)   en System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile)   en System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean noAssert)   en System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(VirtualPath virtualPath, Type requiredBaseType, HttpContext context, Boolean allowCrossApp, Boolean noAssert)   en System.Web.UI.PageHandlerFactory.GetHandlerHelper(HttpContext context, String requestType, VirtualPath virtualPath, String physicalPath)   en System.Web.UI.PageHandlerFactory.GetHandler(HttpContext context, String requestType, String virtualPath, String path)   en System.Web.HttpApplication.MaterializeHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()   en System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)2017-09-05 13:23:39,820 [ID (null)] [9] ERROR global_asax - ID Error       : -294073767Mensaje Error : El archivo '/Convenios_Site/Paginas/ConIndicadoresXEstado.aspx' no existe.Stack     :    en System.Web.UI.Util.CheckVirtualFileExists(VirtualPath virtualPath)   en System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile)   en System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile)   en System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean noAssert)   en System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(VirtualPath virtualPath, Type requiredBaseType, HttpContext context, Boolean allowCrossApp, Boolean noAssert)   en System.Web.UI.PageHandlerFactory.GetHandlerHelper(HttpContext context, String requestType, VirtualPath virtualPath, String physicalPath)   en System.Web.UI.PageHandlerFactory.GetHandler(HttpContext context, String requestType, String virtualPath, String path)   en System.Web.HttpApplication.MaterializeHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()   en System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)2017-09-05 13:33:11,032 [ID (null)] [6] ERROR global_asax - ID Error       : -1835637661Mensaje Error : c:\Desarrollos\ConveniosInternacionales\Convenios_Site\Paginas\ConIndicadoresXEstado.aspx.cs(183): error CS1501: Ninguna sobrecarga para el método 'traerScriptGrafica' acepta '10' argumentosStack     :    en System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath)   en System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile)   en System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile)   en System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean noAssert)   en System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(VirtualPath virtualPath, Type requiredBaseType, HttpContext context, Boolean allowCrossApp, Boolean noAssert)   en System.Web.UI.PageHandlerFactory.GetHandlerHelper(HttpContext context, String requestType, VirtualPath virtualPath, String physicalPath)   en System.Web.UI.PageHandlerFactory.GetHandler(HttpContext context, String requestType, String virtualPath, String path)   en System.Web.HttpApplication.MaterializeHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()   en System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)2017-09-05 13:33:26,860 [ID (null)] [6] ERROR MasterPage - 7503-Error en sesión.No se puede obtener credencialesAnses.Director.Session.DirSessionExepcion: 7503-Error en sesión.No se puede obtener credenciales   en Anses.Director.Session.Credencial.ObtenerCredencial()   en MasterPage.Page_Init(Object sender, EventArgs e) en c:\Desarrollos\ConveniosInternacionales\Convenios_Site\MasterPage\MasterPage.master.cs:línea 1512017-09-05 13:33:27,391 [ID (null)] [6] ERROR DirectorManager - En consultarDirector 7503-Error en sesión.No se puede obtener credenciales2017-09-05 13:49:41,606 [ID (null)] [8] ERROR global_asax - ID Error       : -1684465448Mensaje Error : Se detectó un posible valor Request.Form peligroso en el cliente (ctl00$body$txtNota$txttextarea="<p>ESTA ES UNA PRUEB...").Stack     :    en System.Web.HttpRequest.ValidateString(String s, String valueName, String collectionName)   en System.Web.HttpRequest.ValidateNameValueCollection(NameValueCollection nvc, String collectionName)   en System.Web.HttpRequest.get_Form()   en System.Web.UI.Page.GetCollectionBasedOnMethod(Boolean dontReturnNull)   en System.Web.UI.Page.DeterminePostBackMode()   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)   en System.Web.UI.Page.ProcessRequest(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)   en System.Web.UI.Page.ProcessRequest()   en System.Web.UI.Page.ProcessRequestWithNoAssert(HttpContext context)   en System.Web.UI.Page.ProcessRequest(HttpContext context)   en ASP.paginas_amnotas_aspx.ProcessRequest(HttpContext context) en c:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_Web_oovmzx1p.0.cs:línea 0   en System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()   en System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)2017-09-05 13:49:46,788 [ID (null)] [6] ERROR global_asax - ID Error       : 2026252730Mensaje Error : Se detectó un posible valor Request.Form peligroso en el cliente (ctl00$body$txtNota$txttextarea="<p>ESTA ES UNA PRUEB...").Stack     :    en System.Web.HttpRequest.ValidateString(String s, String valueName, String collectionName)   en System.Web.HttpRequest.ValidateNameValueCollection(NameValueCollection nvc, String collectionName)   en System.Web.HttpRequest.get_Form()   en System.Web.UI.Page.GetCollectionBasedOnMethod(Boolean dontReturnNull)   en System.Web.UI.Page.DeterminePostBackMode()   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)   en System.Web.UI.Page.ProcessRequest(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)   en System.Web.UI.Page.ProcessRequest()   en System.Web.UI.Page.ProcessRequestWithNoAssert(HttpContext context)   en System.Web.UI.Page.ProcessRequest(HttpContext context)   en ASP.paginas_amnotas_aspx.ProcessRequest(HttpContext context) en c:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_Web_oovmzx1p.0.cs:línea 0   en System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()   en System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)2017-09-05 13:49:48,631 [ID (null)] [6] ERROR global_asax - ID Error       : -1573447172Mensaje Error : Se detectó un posible valor Request.Form peligroso en el cliente (ctl00$body$txtNota$txttextarea="<p>ESTA ES UNA PRUEB...").Stack     :    en System.Web.HttpRequest.ValidateString(String s, String valueName, String collectionName)   en System.Web.HttpRequest.ValidateNameValueCollection(NameValueCollection nvc, String collectionName)   en System.Web.HttpRequest.get_Form()   en System.Web.UI.Page.GetCollectionBasedOnMethod(Boolean dontReturnNull)   en System.Web.UI.Page.DeterminePostBackMode()   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)   en System.Web.UI.Page.ProcessRequest(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)   en System.Web.UI.Page.ProcessRequest()   en System.Web.UI.Page.ProcessRequestWithNoAssert(HttpContext context)   en System.Web.UI.Page.ProcessRequest(HttpContext context)   en ASP.paginas_amnotas_aspx.ProcessRequest(HttpContext context) en c:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_Web_oovmzx1p.0.cs:línea 0   en System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()   en System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)2017-09-05 13:49:55,846 [ID (null)] [7] ERROR global_asax - ID Error       : 1551721890Mensaje Error : Se detectó un posible valor Request.Form peligroso en el cliente (ctl00$body$txtNota$txttextarea="<p>ESTA ES UNA PRUEB...").Stack     :    en System.Web.HttpRequest.ValidateString(String s, String valueName, String collectionName)   en System.Web.HttpRequest.ValidateNameValueCollection(NameValueCollection nvc, String collectionName)   en System.Web.HttpRequest.get_Form()   en System.Web.UI.Page.GetCollectionBasedOnMethod(Boolean dontReturnNull)   en System.Web.UI.Page.DeterminePostBackMode()   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)   en System.Web.UI.Page.ProcessRequest(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)   en System.Web.UI.Page.ProcessRequest()   en System.Web.UI.Page.ProcessRequestWithNoAssert(HttpContext context)   en System.Web.UI.Page.ProcessRequest(HttpContext context)   en ASP.paginas_amnotas_aspx.ProcessRequest(HttpContext context) en c:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_Web_oovmzx1p.0.cs:línea 0   en System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()   en System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)2017-09-05 13:50:11,647 [ID (null)] [5] ERROR global_asax - ID Error       : 300883980Mensaje Error : Se detectó un posible valor Request.Form peligroso en el cliente (ctl00$body$txtNota$txttextarea="<p>ESTA ES UNA PRUEB...").Stack     :    en System.Web.HttpRequest.ValidateString(String s, String valueName, String collectionName)   en System.Web.HttpRequest.ValidateNameValueCollection(NameValueCollection nvc, String collectionName)   en System.Web.HttpRequest.get_Form()   en System.Web.UI.Page.GetCollectionBasedOnMethod(Boolean dontReturnNull)   en System.Web.UI.Page.DeterminePostBackMode()   en System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)   en System.Web.UI.Page.ProcessRequest(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)   en System.Web.UI.Page.ProcessRequest()   en System.Web.UI.Page.ProcessRequestWithNoAssert(HttpContext context)   en System.Web.UI.Page.ProcessRequest(HttpContext context)   en ASP.paginas_amnotas_aspx.ProcessRequest(HttpContext context) en c:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\convenios_site\6c96af76\9489b757\App_Web_oovmzx1p.0.cs:línea 0   en System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()   en System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)2017-09-05 14:07:36,148 [ID (null)] [5] ERROR global_asax - ID Error       : -1175661026Mensaje Error : c:\Desarrollos\ConveniosInternacionales\Convenios_Site\Paginas\ConIndicadoresXEstado.aspx.cs(183): error CS1501: Ninguna sobrecarga para el método 'traerScriptGrafica' acepta '10' argumentosStack     :    en System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath)   en System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile)   en System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile)   en System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean noAssert)   en System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(VirtualPath virtualPath, Type requiredBaseType, HttpContext context, Boolean allowCrossApp, Boolean noAssert)   en System.Web.UI.PageHandlerFactory.GetHandlerHelper(HttpContext context, String requestType, VirtualPath virtualPath, String physicalPath)   en System.Web.UI.PageHandlerFactory.GetHandler(HttpContext context, String requestType, String virtualPath, String path)   en System.Web.HttpApplication.MaterializeHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()   en System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)